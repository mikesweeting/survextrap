// Generated by rstantools.  Do not edit by hand.

/*
    survextrap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    survextrap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with survextrap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_survextrap_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 375> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 150, column 4 to column 24)",
  " (in 'string', line 151, column 4 to column 24)",
  " (in 'string', line 152, column 4 to column 26)",
  " (in 'string', line 153, column 4 to column 33)",
  " (in 'string', line 154, column 4 to column 40)",
  " (in 'string', line 155, column 4 to column 33)",
  " (in 'string', line 157, column 4 to column 35)",
  " (in 'string', line 158, column 4 to column 35)",
  " (in 'string', line 161, column 4 to column 20)",
  " (in 'string', line 162, column 4 to column 24)",
  " (in 'string', line 163, column 4 to column 37)",
  " (in 'string', line 164, column 4 to column 37)",
  " (in 'string', line 165, column 4 to column 39)",
  " (in 'string', line 167, column 4 to column 33)",
  " (in 'string', line 168, column 4 to column 33)",
  " (in 'string', line 169, column 4 to column 35)",
  " (in 'string', line 170, column 4 to column 34)",
  " (in 'string', line 171, column 4 to column 13)",
  " (in 'string', line 332, column 4 to column 44)",
  " (in 'string', line 333, column 4 to column 34)",
  " (in 'string', line 334, column 4 to column 48)",
  " (in 'string', line 214, column 5 to column 52)",
  " (in 'string', line 212, column 5 to column 46)",
  " (in 'string', line 211, column 1 to line 214, column 52)",
  " (in 'string', line 215, column 1 to column 20)",
  " (in 'string', line 218, column 2 to column 48)",
  " (in 'string', line 217, column 24 to line 219, column 6)",
  " (in 'string', line 217, column 5 to line 219, column 6)",
  " (in 'string', line 216, column 17 to line 220, column 2)",
  " (in 'string', line 216, column 1 to line 220, column 2)",
  " (in 'string', line 223, column 2 to column 48)",
  " (in 'string', line 222, column 24 to line 224, column 6)",
  " (in 'string', line 222, column 5 to line 224, column 6)",
  " (in 'string', line 221, column 17 to line 225, column 2)",
  " (in 'string', line 221, column 1 to line 225, column 2)",
  " (in 'string', line 228, column 2 to column 49)",
  " (in 'string', line 227, column 25 to line 229, column 6)",
  " (in 'string', line 227, column 5 to line 229, column 6)",
  " (in 'string', line 226, column 18 to line 230, column 2)",
  " (in 'string', line 226, column 1 to line 230, column 2)",
  " (in 'string', line 233, column 21 to column 64)",
  " (in 'string', line 233, column 19 to column 66)",
  " (in 'string', line 233, column 5 to column 66)",
  " (in 'string', line 234, column 21 to column 64)",
  " (in 'string', line 234, column 19 to column 66)",
  " (in 'string', line 234, column 5 to column 66)",
  " (in 'string', line 235, column 22 to column 68)",
  " (in 'string', line 235, column 20 to column 70)",
  " (in 'string', line 235, column 5 to column 70)",
  " (in 'string', line 232, column 20 to line 236, column 2)",
  " (in 'string', line 232, column 1 to line 236, column 2)",
  " (in 'string', line 237, column 1 to column 9)",
  " (in 'string', line 210, column 11 to line 238, column 5)",
  " (in 'string', line 174, column 5 to column 56)",
  " (in 'string', line 173, column 22 to line 175, column 2)",
  " (in 'string', line 173, column 1 to line 175, column 2)",
  " (in 'string', line 179, column 5 to column 24)",
  " (in 'string', line 178, column 8 to line 180, column 2)",
  " (in 'string', line 177, column 5 to column 18)",
  " (in 'string', line 176, column 14 to line 178, column 2)",
  " (in 'string', line 176, column 1 to line 180, column 2)",
  " (in 'string', line 181, column 1 to column 39)",
  " (in 'string', line 182, column 1 to column 20)",
  " (in 'string', line 184, column 5 to column 48)",
  " (in 'string', line 186, column 2 to column 73)",
  " (in 'string', line 185, column 28 to line 187, column 6)",
  " (in 'string', line 185, column 5 to line 187, column 6)",
  " (in 'string', line 189, column 2 to column 81)",
  " (in 'string', line 188, column 24 to line 190, column 6)",
  " (in 'string', line 188, column 5 to line 190, column 6)",
  " (in 'string', line 183, column 17 to line 191, column 2)",
  " (in 'string', line 183, column 1 to line 191, column 2)",
  " (in 'string', line 193, column 5 to column 48)",
  " (in 'string', line 195, column 2 to column 73)",
  " (in 'string', line 194, column 28 to line 196, column 6)",
  " (in 'string', line 194, column 5 to line 196, column 6)",
  " (in 'string', line 198, column 2 to column 81)",
  " (in 'string', line 197, column 24 to line 199, column 6)",
  " (in 'string', line 197, column 5 to line 199, column 6)",
  " (in 'string', line 192, column 17 to line 200, column 2)",
  " (in 'string', line 192, column 1 to line 200, column 2)",
  " (in 'string', line 202, column 5 to column 51)",
  " (in 'string', line 204, column 2 to column 73)",
  " (in 'string', line 203, column 28 to line 205, column 6)",
  " (in 'string', line 203, column 5 to line 205, column 6)",
  " (in 'string', line 207, column 2 to column 83)",
  " (in 'string', line 206, column 25 to line 208, column 6)",
  " (in 'string', line 206, column 5 to line 208, column 6)",
  " (in 'string', line 201, column 18 to line 209, column 2)",
  " (in 'string', line 201, column 1 to line 209, column 2)",
  " (in 'string', line 172, column 20 to line 210, column 5)",
  " (in 'string', line 172, column 4 to line 238, column 5)",
  " (in 'string', line 241, column 11 to column 17)",
  " (in 'string', line 241, column 4 to column 31)",
  " (in 'string', line 242, column 11 to column 17)",
  " (in 'string', line 242, column 4 to column 31)",
  " (in 'string', line 243, column 11 to column 18)",
  " (in 'string', line 243, column 4 to column 33)",
  " (in 'string', line 244, column 4 to column 12)",
  " (in 'string', line 245, column 11 to column 18)",
  " (in 'string', line 245, column 4 to column 31)",
  " (in 'string', line 246, column 11 to column 18)",
  " (in 'string', line 246, column 4 to column 32)",
  " (in 'string', line 247, column 11 to column 17)",
  " (in 'string', line 247, column 4 to column 31)",
  " (in 'string', line 248, column 11 to column 17)",
  " (in 'string', line 248, column 4 to column 31)",
  " (in 'string', line 249, column 11 to column 18)",
  " (in 'string', line 249, column 4 to column 33)",
  " (in 'string', line 250, column 20 to column 81)",
  " (in 'string', line 250, column 4 to column 81)",
  " (in 'string', line 251, column 20 to column 81)",
  " (in 'string', line 251, column 4 to column 81)",
  " (in 'string', line 252, column 21 to column 84)",
  " (in 'string', line 252, column 4 to column 84)",
  " (in 'string', line 255, column 24 to column 55)",
  " (in 'string', line 255, column 8 to column 55)",
  " (in 'string', line 256, column 24 to column 55)",
  " (in 'string', line 256, column 8 to column 55)",
  " (in 'string', line 257, column 25 to column 55)",
  " (in 'string', line 257, column 8 to column 55)",
  " (in 'string', line 253, column 19 to line 258, column 5)",
  " (in 'string', line 253, column 4 to line 258, column 5)",
  " (in 'string', line 259, column 34 to column 41)",
  " (in 'string', line 259, column 14 to column 28)",
  " (in 'string', line 259, column 4 to column 41)",
  " (in 'string', line 260, column 4 to column 41)",
  " (in 'string', line 261, column 4 to column 41)",
  " (in 'string', line 262, column 4 to column 43)",
  " (in 'string', line 264, column 24 to column 95)",
  " (in 'string', line 264, column 8 to column 95)",
  " (in 'string', line 265, column 24 to column 95)",
  " (in 'string', line 265, column 8 to column 95)",
  " (in 'string', line 266, column 25 to column 96)",
  " (in 'string', line 266, column 8 to column 96)",
  " (in 'string', line 263, column 22 to line 267, column 5)",
  " (in 'string', line 263, column 4 to line 267, column 5)",
  " (in 'string', line 268, column 20 to line 269, column 53)",
  " (in 'string', line 268, column 4 to line 269, column 53)",
  " (in 'string', line 270, column 20 to line 271, column 14)",
  " (in 'string', line 270, column 4 to line 271, column 14)",
  " (in 'string', line 273, column 8 to line 274, column 37)",
  " (in 'string', line 275, column 8 to line 276, column 39)",
  " (in 'string', line 277, column 8 to column 74)",
  " (in 'string', line 272, column 21 to line 278, column 5)",
  " (in 'string', line 272, column 4 to line 278, column 5)",
  " (in 'string', line 280, column 4 to line 281, column 41)",
  " (in 'string', line 283, column 4 to line 284, column 41)",
  " (in 'string', line 293, column 4 to column 39)",
  " (in 'string', line 296, column 1 to column 45)",
  " (in 'string', line 295, column 28 to line 297, column 7)",
  " (in 'string', line 295, column 6 to line 297, column 7)",
  " (in 'string', line 294, column 21 to line 298, column 5)",
  " (in 'string', line 294, column 4 to line 298, column 5)",
  " (in 'string', line 291, column 27 to line 299, column 3)",
  " (in 'string', line 291, column 7 to line 299, column 3)",
  " (in 'string', line 289, column 4 to column 27)",
  " (in 'string', line 287, column 22 to line 290, column 3)",
  " (in 'string', line 287, column 2 to line 299, column 3)",
  " (in 'string', line 302, column 4 to column 47)",
  " (in 'string', line 301, column 12 to line 303, column 3)",
  " (in 'string', line 301, column 2 to line 303, column 3)",
  " (in 'string', line 306, column 4 to line 307, column 51)",
  " (in 'string', line 304, column 20 to line 308, column 3)",
  " (in 'string', line 304, column 2 to line 308, column 3)",
  " (in 'string', line 311, column 4 to column 44)",
  " (in 'string', line 310, column 14 to line 312, column 3)",
  " (in 'string', line 310, column 2 to line 312, column 3)",
  " (in 'string', line 315, column 4 to column 49)",
  " (in 'string', line 322, column 1 to column 36)",
  " (in 'string', line 325, column 5 to column 51)",
  " (in 'string', line 324, column 25 to line 326, column 4)",
  " (in 'string', line 324, column 3 to line 326, column 4)",
  " (in 'string', line 323, column 1 to line 326, column 4)",
  " (in 'string', line 320, column 31 to line 327, column 7)",
  " (in 'string', line 320, column 11 to line 327, column 7)",
  " (in 'string', line 318, column 1 to column 37)",
  " (in 'string', line 317, column 26 to line 319, column 7)",
  " (in 'string', line 317, column 6 to line 327, column 7)",
  " (in 'string', line 316, column 25 to line 328, column 5)",
  " (in 'string', line 316, column 4 to line 328, column 5)",
  " (in 'string', line 314, column 20 to line 329, column 3)",
  " (in 'string', line 314, column 2 to line 329, column 3)",
  " (in 'string', line 97, column 4 to column 24)",
  " (in 'string', line 98, column 4 to column 24)",
  " (in 'string', line 99, column 4 to column 23)",
  " (in 'string', line 100, column 4 to column 25)",
  " (in 'string', line 101, column 4 to column 23)",
  " (in 'string', line 102, column 4 to column 27)",
  " (in 'string', line 103, column 4 to column 26)",
  " (in 'string', line 105, column 11 to column 17)",
  " (in 'string', line 105, column 18 to column 23)",
  " (in 'string', line 105, column 4 to column 37)",
  " (in 'string', line 106, column 11 to column 17)",
  " (in 'string', line 106, column 18 to column 23)",
  " (in 'string', line 106, column 4 to column 38)",
  " (in 'string', line 107, column 11 to column 17)",
  " (in 'string', line 107, column 18 to column 23)",
  " (in 'string', line 107, column 4 to column 38)",
  " (in 'string', line 108, column 11 to column 18)",
  " (in 'string', line 108, column 19 to column 24)",
  " (in 'string', line 108, column 4 to column 42)",
  " (in 'string', line 109, column 11 to column 18)",
  " (in 'string', line 109, column 19 to column 24)",
  " (in 'string', line 109, column 4 to column 43)",
  " (in 'string', line 110, column 11 to column 17)",
  " (in 'string', line 110, column 18 to column 23)",
  " (in 'string', line 110, column 4 to column 33)",
  " (in 'string', line 111, column 11 to column 17)",
  " (in 'string', line 111, column 18 to column 23)",
  " (in 'string', line 111, column 4 to column 33)",
  " (in 'string', line 112, column 11 to column 17)",
  " (in 'string', line 112, column 18 to column 27)",
  " (in 'string', line 112, column 4 to column 41)",
  " (in 'string', line 113, column 11 to column 17)",
  " (in 'string', line 113, column 18 to column 27)",
  " (in 'string', line 113, column 4 to column 41)",
  " (in 'string', line 114, column 11 to column 17)",
  " (in 'string', line 114, column 18 to column 26)",
  " (in 'string', line 114, column 4 to column 39)",
  " (in 'string', line 115, column 11 to column 17)",
  " (in 'string', line 115, column 18 to column 26)",
  " (in 'string', line 115, column 4 to column 39)",
  " (in 'string', line 118, column 10 to column 17)",
  " (in 'string', line 118, column 4 to column 38)",
  " (in 'string', line 119, column 10 to column 17)",
  " (in 'string', line 119, column 4 to column 38)",
  " (in 'string', line 120, column 11 to column 18)",
  " (in 'string', line 120, column 19 to column 24)",
  " (in 'string', line 120, column 4 to column 32)",
  " (in 'string', line 121, column 11 to column 18)",
  " (in 'string', line 121, column 19 to column 28)",
  " (in 'string', line 121, column 4 to column 40)",
  " (in 'string', line 122, column 11 to column 18)",
  " (in 'string', line 122, column 19 to column 27)",
  " (in 'string', line 122, column 4 to column 38)",
  " (in 'string', line 123, column 11 to column 18)",
  " (in 'string', line 123, column 4 to column 27)",
  " (in 'string', line 124, column 4 to column 16)",
  " (in 'string', line 125, column 20 to column 29)",
  " (in 'string', line 125, column 4 to column 41)",
  " (in 'string', line 126, column 4 to column 30)",
  " (in 'string', line 127, column 11 to column 18)",
  " (in 'string', line 127, column 4 to column 28)",
  " (in 'string', line 128, column 4 to column 13)",
  " (in 'string', line 129, column 4 to column 17)",
  " (in 'string', line 130, column 11 to column 17)",
  " (in 'string', line 130, column 4 to column 33)",
  " (in 'string', line 131, column 11 to column 18)",
  " (in 'string', line 131, column 4 to column 39)",
  " (in 'string', line 132, column 11 to column 18)",
  " (in 'string', line 132, column 4 to column 38)",
  " (in 'string', line 133, column 4 to column 26)",
  " (in 'string', line 134, column 4 to column 27)",
  " (in 'string', line 135, column 4 to column 34)",
  " (in 'string', line 136, column 20 to column 29)",
  " (in 'string', line 136, column 4 to column 41)",
  " (in 'string', line 137, column 10 to column 15)",
  " (in 'string', line 137, column 4 to column 47)",
  " (in 'string', line 138, column 11 to column 16)",
  " (in 'string', line 138, column 4 to column 39)",
  " (in 'string', line 139, column 11 to column 16)",
  " (in 'string', line 139, column 4 to column 36)",
  " (in 'string', line 140, column 11 to column 16)",
  " (in 'string', line 140, column 4 to column 33)",
  " (in 'string', line 141, column 10 to column 19)",
  " (in 'string', line 141, column 4 to column 56)",
  " (in 'string', line 142, column 11 to column 20)",
  " (in 'string', line 142, column 4 to column 48)",
  " (in 'string', line 143, column 11 to column 20)",
  " (in 'string', line 143, column 4 to column 45)",
  " (in 'string', line 144, column 11 to column 20)",
  " (in 'string', line 144, column 4 to column 42)",
  " (in 'string', line 145, column 4 to column 16)",
  " (in 'string', line 147, column 11 to column 19)",
  " (in 'string', line 147, column 4 to column 34)",
  " (in 'string', line 150, column 10 to column 11)",
  " (in 'string', line 151, column 11 to column 16)",
  " (in 'string', line 152, column 11 to column 18)",
  " (in 'string', line 153, column 20 to column 27)",
  " (in 'string', line 154, column 28 to column 32)",
  " (in 'string', line 155, column 11 to column 20)",
  " (in 'string', line 157, column 20 to column 28)",
  " (in 'string', line 158, column 11 to column 19)",
  " (in 'string', line 158, column 20 to column 27)",
  " (in 'string', line 161, column 11 to column 16)",
  " (in 'string', line 162, column 11 to column 16)",
  " (in 'string', line 163, column 11 to column 17)",
  " (in 'string', line 163, column 18 to column 23)",
  " (in 'string', line 164, column 11 to column 17)",
  " (in 'string', line 164, column 18 to column 23)",
  " (in 'string', line 165, column 11 to column 18)",
  " (in 'string', line 165, column 19 to column 24)",
  " (in 'string', line 167, column 11 to column 17)",
  " (in 'string', line 167, column 18 to column 23)",
  " (in 'string', line 168, column 11 to column 17)",
  " (in 'string', line 168, column 18 to column 23)",
  " (in 'string', line 169, column 11 to column 18)",
  " (in 'string', line 169, column 19 to column 24)",
  " (in 'string', line 170, column 11 to column 19)",
  " (in 'string', line 170, column 20 to column 27)",
  " (in 'string', line 333, column 11 to column 16)",
  " (in 'string', line 334, column 11 to column 20)",
  " (in 'string', line 3, column 8 to column 59)",
  " (in 'string', line 2, column 69 to line 4, column 5)",
  " (in 'string', line 6, column 15 to column 26)",
  " (in 'string', line 6, column 8 to column 32)",
  " (in 'string', line 7, column 8 to column 64)",
  " (in 'string', line 9, column 12 to column 96)",
  " (in 'string', line 8, column 29 to line 10, column 9)",
  " (in 'string', line 8, column 8 to line 10, column 9)",
  " (in 'string', line 11, column 8 to column 19)",
  " (in 'string', line 5, column 71 to line 12, column 5)",
  " (in 'string', line 14, column 15 to column 26)",
  " (in 'string', line 14, column 8 to column 32)",
  " (in 'string', line 16, column 8 to line 17, column 47)",
  " (in 'string', line 18, column 8 to column 19)",
  " (in 'string', line 13, column 85 to line 19, column 5)",
  " (in 'string', line 23, column 15 to column 26)",
  " (in 'string', line 23, column 8 to column 32)",
  " (in 'string', line 24, column 15 to column 26)",
  " (in 'string', line 24, column 8 to column 41)",
  " (in 'string', line 25, column 1 to column 55)",
  " (in 'string', line 31, column 12 to column 31)",
  " (in 'string', line 30, column 15 to line 32, column 9)",
  " (in 'string', line 28, column 16 to column 77)",
  " (in 'string', line 27, column 37 to line 29, column 13)",
  " (in 'string', line 27, column 12 to line 29, column 13)",
  " (in 'string', line 26, column 18 to line 30, column 9)",
  " (in 'string', line 26, column 8 to line 32, column 9)",
  " (in 'string', line 33, column 8 to column 19)",
  " (in 'string', line 22, column 24 to line 34, column 5)",
  " (in 'string', line 39, column 15 to column 26)",
  " (in 'string', line 39, column 8 to column 32)",
  " (in 'string', line 40, column 15 to column 26)",
  " (in 'string', line 40, column 8 to column 41)",
  " (in 'string', line 41, column 15 to column 26)",
  " (in 'string', line 41, column 8 to column 40)",
  " (in 'string', line 42, column 15 to column 26)",
  " (in 'string', line 42, column 8 to column 36)",
  " (in 'string', line 50, column 5 to column 56)",
  " (in 'string', line 51, column 12 to column 30)",
  " (in 'string', line 49, column 15 to line 52, column 9)",
  " (in 'string', line 44, column 5 to column 66)",
  " (in 'string', line 45, column 12 to column 75)",
  " (in 'string', line 47, column 16 to column 74)",
  " (in 'string', line 46, column 36 to line 48, column 13)",
  " (in 'string', line 46, column 12 to line 48, column 13)",
  " (in 'string', line 43, column 18 to line 49, column 9)",
  " (in 'string', line 43, column 8 to line 52, column 9)",
  " (in 'string', line 55, column 2 to column 41)",
  " (in 'string', line 54, column 29 to line 56, column 6)",
  " (in 'string', line 54, column 5 to line 56, column 6)",
  " (in 'string', line 53, column 15 to line 57, column 2)",
  " (in 'string', line 53, column 1 to line 57, column 2)",
  " (in 'string', line 58, column 8 to column 19)",
  " (in 'string', line 38, column 21 to line 59, column 5)",
  " (in 'string', line 64, column 15 to column 26)",
  " (in 'string', line 64, column 8 to column 32)",
  " (in 'string', line 65, column 8 to line 66, column 58)",
  " (in 'string', line 67, column 8 to column 19)",
  " (in 'string', line 63, column 40 to line 68, column 5)",
  " (in 'string', line 83, column 8 to column 62)",
  " (in 'string', line 82, column 13 to line 83, column 62)",
  " (in 'string', line 81, column 8 to column 55)",
  " (in 'string', line 80, column 8 to line 83, column 62)",
  " (in 'string', line 79, column 77 to line 85, column 5)",
  " (in 'string', line 91, column 2 to column 68)",
  " (in 'string', line 90, column 10 to line 91, column 68)",
  " (in 'string', line 89, column 2 to column 58)",
  " (in 'string', line 88, column 5 to line 91, column 68)",
  " (in 'string', line 87, column 25 to line 92, column 2)",
  " (in 'string', line 87, column 1 to line 92, column 2)",
  " (in 'string', line 86, column 92 to line 94, column 5)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
mspline_log_haz(const T0__& alpha_arg__, const T1__& basis_arg__, const T2__&
                coefs_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
mspline_log_surv(const T0__& alpha_arg__, const T1__& ibasis_arg__,
                 const T2__& coefs_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
mspline_log_dens(const T0__& alpha_arg__, const T1__& basis_arg__,
                 const T2__& ibasis_arg__, const T3__& coefs_arg__,
                 std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>>,-1,1>
log_surv(const T0__& alpha_arg__, const T1__& ibasis_arg__, const T2__&
         coefs_arg__, const int& cure, const T4__& pcure_arg__, const int&
         modelid, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::promote_args_t<stan::base_type_t<T8__>>>,-1,1>
log_haz(const T0__& alpha_arg__, const T1__& basis_arg__, const T2__&
        coefs_arg__, const int& cure, const T4__& pcure_arg__, const T5__&
        ibasis_arg__, const int& modelid, const int& relative, const T8__&
        backhaz_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::promote_args_t<stan::base_type_t<T8__>>>,-1,1>
log_dens(const T0__& alpha_arg__, const T1__& basis_arg__, const T2__&
         coefs_arg__, const int& cure, const T4__& pcure_arg__, const T5__&
         ibasis_arg__, const int& modelid, const int& relative, const T8__&
         backhaz_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
void
loghaz_lp(const T0__& gamma, const int& dist, const T2__& location,
          const T3__& scale, const T4__& df, T_lp__& lp__, T_lp_accum__&
          lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
void
loghr_lp(const T0__& loghr_arg__, const std::vector<int>& dist, const T2__&
         location_arg__, const T3__& scale_arg__, const T4__& df_arg__,
         T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
mspline_log_haz(const T0__& alpha_arg__, const T1__& basis_arg__, const T2__&
                coefs_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& coefs = stan::math::to_ref(coefs_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 304;
    return stan::math::add(
             stan::math::log(stan::math::rows_dot_product(basis, coefs)),
             alpha);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
mspline_log_surv(const T0__& alpha_arg__, const T1__& ibasis_arg__,
                 const T2__& coefs_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& coefs = stan::math::to_ref(coefs_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 306;
    stan::math::validate_non_negative_index("res", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> res =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 308;
    stan::model::assign(res,
      stan::math::elt_multiply(
        stan::math::minus(stan::math::rows_dot_product(ibasis, coefs)),
        stan::math::exp(alpha)), "assigning variable res");
    current_statement__ = 311;
    if (stan::math::logical_gt(
          stan::math::exp(
            stan::model::rvalue(res, "res", stan::model::index_uni(1))), 1)) {
      current_statement__ = 309;
      std::stringstream errmsg_stream__;
      stan::math::stan_print(&errmsg_stream__,
        "Probability > 1 computed. Not your fault - report a bug to the developer.");
      throw std::domain_error(errmsg_stream__.str());
    }
    current_statement__ = 312;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
mspline_log_dens(const T0__& alpha_arg__, const T1__& basis_arg__,
                 const T2__& ibasis_arg__, const T3__& coefs_arg__,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& coefs = stan::math::to_ref(coefs_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 314;
    stan::math::validate_non_negative_index("res", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> res =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 316;
    stan::model::assign(res,
      stan::math::add(mspline_log_haz(alpha, basis, coefs, pstream__),
        mspline_log_surv(alpha, ibasis, coefs, pstream__)),
      "assigning variable res");
    current_statement__ = 317;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>>,-1,1>
log_surv(const T0__& alpha_arg__, const T1__& ibasis_arg__, const T2__&
         coefs_arg__, const int& cure, const T4__& pcure_arg__, const int&
         modelid, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& coefs = stan::math::to_ref(coefs_arg__);
  const auto& pcure = stan::math::to_ref(pcure_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 319;
    stan::math::validate_non_negative_index("res", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> res =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 321;
    stan::math::validate_non_negative_index("base_logsurv", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> base_logsurv =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 323;
    stan::model::assign(base_logsurv,
      mspline_log_surv(alpha, ibasis, coefs, pstream__),
      "assigning variable base_logsurv");
    current_statement__ = 330;
    if (cure) {
      current_statement__ = 328;
      for (int i = 1; i <= stan::math::rows(alpha); ++i) {
        current_statement__ = 326;
        stan::model::assign(res,
          stan::math::log(
            (stan::model::rvalue(pcure, "pcure", stan::model::index_uni(i)) +
            ((1 -
            stan::model::rvalue(pcure, "pcure", stan::model::index_uni(i))) *
            stan::math::exp(
              stan::model::rvalue(base_logsurv, "base_logsurv",
                stan::model::index_uni(i)))))), "assigning variable res",
          stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 324;
      stan::model::assign(res, base_logsurv, "assigning variable res");
    }
    current_statement__ = 331;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::promote_args_t<stan::base_type_t<T8__>>>,-1,1>
log_haz(const T0__& alpha_arg__, const T1__& basis_arg__, const T2__&
        coefs_arg__, const int& cure, const T4__& pcure_arg__, const T5__&
        ibasis_arg__, const int& modelid, const int& relative, const T8__&
        backhaz_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<stan::base_type_t<T8__>>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& coefs = stan::math::to_ref(coefs_arg__);
  const auto& pcure = stan::math::to_ref(pcure_arg__);
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& backhaz = stan::math::to_ref(backhaz_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 333;
    stan::math::validate_non_negative_index("res", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> res =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 335;
    stan::math::validate_non_negative_index("base_logdens", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> base_logdens =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 337;
    stan::math::validate_non_negative_index("base_loghaz", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> base_loghaz =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 339;
    stan::math::validate_non_negative_index("logsurv", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> logsurv =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 350;
    if (cure) {
      current_statement__ = 344;
      stan::model::assign(base_logdens,
        mspline_log_dens(alpha, basis, ibasis, coefs, pstream__),
        "assigning variable base_logdens");
      current_statement__ = 345;
      stan::model::assign(logsurv,
        log_surv(alpha, ibasis, coefs, cure, pcure, modelid, pstream__),
        "assigning variable logsurv");
      current_statement__ = 348;
      for (int i = 1; i <= stan::math::rows(alpha); ++i) {
        current_statement__ = 346;
        stan::model::assign(res,
          ((stan::math::log((1 -
              stan::model::rvalue(pcure, "pcure", stan::model::index_uni(i))))
          +
          stan::model::rvalue(base_logdens, "base_logdens",
            stan::model::index_uni(i))) -
          stan::model::rvalue(logsurv, "logsurv", stan::model::index_uni(i))),
          "assigning variable res", stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 341;
      stan::model::assign(base_loghaz,
        mspline_log_haz(alpha, basis, coefs, pstream__),
        "assigning variable base_loghaz");
      current_statement__ = 342;
      stan::model::assign(res, base_loghaz, "assigning variable res");
    }
    current_statement__ = 355;
    if (relative) {
      current_statement__ = 353;
      for (int i = 1; i <= stan::math::rows(alpha); ++i) {
        current_statement__ = 351;
        stan::model::assign(res,
          stan::math::log(
            (stan::model::rvalue(backhaz, "backhaz",
               stan::model::index_uni(i)) +
            stan::math::exp(
              stan::model::rvalue(res, "res", stan::model::index_uni(i))))),
          "assigning variable res", stan::model::index_uni(i));
      }
    }
    current_statement__ = 356;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::promote_args_t<stan::base_type_t<T8__>>>,-1,1>
log_dens(const T0__& alpha_arg__, const T1__& basis_arg__, const T2__&
         coefs_arg__, const int& cure, const T4__& pcure_arg__, const T5__&
         ibasis_arg__, const int& modelid, const int& relative, const T8__&
         backhaz_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<stan::base_type_t<T8__>>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& basis = stan::math::to_ref(basis_arg__);
  const auto& coefs = stan::math::to_ref(coefs_arg__);
  const auto& pcure = stan::math::to_ref(pcure_arg__);
  const auto& ibasis = stan::math::to_ref(ibasis_arg__);
  const auto& backhaz = stan::math::to_ref(backhaz_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 358;
    stan::math::validate_non_negative_index("res", "rows(alpha)",
      stan::math::rows(alpha));
    Eigen::Matrix<local_scalar_t__,-1,1> res =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(alpha),
        DUMMY_VAR__);
    current_statement__ = 360;
    stan::model::assign(res,
      stan::math::add(
        log_haz(alpha, basis, coefs, cure, pcure, ibasis, modelid, relative,
          backhaz, pstream__),
        log_surv(alpha, ibasis, coefs, cure, pcure, modelid, pstream__)),
      "assigning variable res");
    current_statement__ = 361;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
void
loghaz_lp(const T0__& gamma, const int& dist, const T2__& location,
          const T3__& scale, const T4__& df, T_lp__& lp__, T_lp_accum__&
          lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 366;
    if (stan::math::logical_eq(dist, 1)) {
      current_statement__ = 365;
      lp_accum__.add(stan::math::normal_lpdf<false>(gamma, location, scale));
    } else {
      current_statement__ = 364;
      if (stan::math::logical_eq(dist, 2)) {
        current_statement__ = 363;
        lp_accum__.add(stan::math::student_t_lpdf<false>(gamma, df, location,
                         scale));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
void
loghr_lp(const T0__& loghr_arg__, const std::vector<int>& dist, const T2__&
         location_arg__, const T3__& scale_arg__, const T4__& df_arg__,
         T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& loghr = stan::math::to_ref(loghr_arg__);
  const auto& location = stan::math::to_ref(location_arg__);
  const auto& scale = stan::math::to_ref(scale_arg__);
  const auto& df = stan::math::to_ref(df_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 373;
    for (int i = 1; i <= stan::math::rows(loghr); ++i) {
      current_statement__ = 371;
      if (stan::math::logical_eq(
            stan::model::rvalue(dist, "dist", stan::model::index_uni(i)), 1)) {
        current_statement__ = 370;
        lp_accum__.add(stan::math::normal_lpdf<false>(
                         stan::model::rvalue(loghr, "loghr",
                           stan::model::index_uni(i)),
                         stan::model::rvalue(location, "location",
                           stan::model::index_uni(i)),
                         stan::model::rvalue(scale, "scale",
                           stan::model::index_uni(i))));
      } else {
        current_statement__ = 369;
        if (stan::math::logical_eq(
              stan::model::rvalue(dist, "dist", stan::model::index_uni(i)), 2)) {
          current_statement__ = 368;
          lp_accum__.add(stan::math::student_t_lpdf<false>(
                           stan::model::rvalue(loghr, "loghr",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(df, "df",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(location, "location",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(scale, "scale",
                             stan::model::index_uni(i))));
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_survextrap final : public model_base_crtp<model_survextrap> {
private:
  int nevent;
  int nrcens;
  int nvars;
  int nextern;
  int ncovs;
  int ncurecovs;
  int nnphcovs;
  Eigen::Matrix<double,-1,-1> basis_event_data__;
  Eigen::Matrix<double,-1,-1> ibasis_event_data__;
  Eigen::Matrix<double,-1,-1> ibasis_rcens_data__;
  Eigen::Matrix<double,-1,-1> ibasis_ext_stop_data__;
  Eigen::Matrix<double,-1,-1> ibasis_ext_start_data__;
  Eigen::Matrix<double,-1,-1> x_event_data__;
  Eigen::Matrix<double,-1,-1> x_rcens_data__;
  Eigen::Matrix<double,-1,-1> xcure_event_data__;
  Eigen::Matrix<double,-1,-1> xcure_rcens_data__;
  Eigen::Matrix<double,-1,-1> xnph_event_data__;
  Eigen::Matrix<double,-1,-1> xnph_rcens_data__;
  std::vector<int> r_ext;
  std::vector<int> n_ext;
  Eigen::Matrix<double,-1,-1> x_ext_data__;
  Eigen::Matrix<double,-1,-1> xcure_ext_data__;
  Eigen::Matrix<double,-1,-1> xnph_ext_data__;
  Eigen::Matrix<double,-1,1> b_mean_data__;
  int est_hsd;
  Eigen::Matrix<double,-1,1> hsd_fixed_data__;
  int smooth_model;
  Eigen::Matrix<double,-1,1> sqrt_wt_data__;
  int cure;
  int relative;
  Eigen::Matrix<double,-1,1> backhaz_event_data__;
  Eigen::Matrix<double,-1,1> backsurv_ext_start_data__;
  Eigen::Matrix<double,-1,1> backsurv_ext_stop_data__;
  int prior_hscale_dist;
  Eigen::Matrix<double,-1,1> prior_hscale_data__;
  Eigen::Matrix<double,-1,1> prior_cure_data__;
  Eigen::Matrix<double,-1,1> prior_hsd_data__;
  std::vector<int> prior_loghr_dist;
  Eigen::Matrix<double,-1,1> prior_loghr_location_data__;
  Eigen::Matrix<double,-1,1> prior_loghr_scale_data__;
  Eigen::Matrix<double,-1,1> prior_loghr_df_data__;
  std::vector<int> prior_logor_cure_dist;
  Eigen::Matrix<double,-1,1> prior_logor_cure_location_data__;
  Eigen::Matrix<double,-1,1> prior_logor_cure_scale_data__;
  Eigen::Matrix<double,-1,1> prior_logor_cure_df_data__;
  int modelid;
  Eigen::Matrix<double,-1,-1> prior_hrsd_data__;
  int b_err_1dim__;
  int nperr_2dim__;
  int b_np_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> basis_event{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ibasis_event{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ibasis_rcens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ibasis_ext_stop{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ibasis_ext_start{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_event{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_rcens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xcure_event{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xcure_rcens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xnph_event{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xnph_rcens{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_ext{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xcure_ext{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xnph_ext{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> b_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> hsd_fixed{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sqrt_wt{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> backhaz_event{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> backsurv_ext_start{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> backsurv_ext_stop{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_hscale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_cure{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_hsd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_loghr_location{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_loghr_scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_loghr_df{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    prior_logor_cure_location{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_logor_cure_scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_logor_cure_df{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_hrsd{nullptr, 0, 0};
public:
  ~model_survextrap() {}
  model_survextrap(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_survextrap_namespace::model_survextrap";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 184;
      context__.validate_dims("data initialization", "nevent", "int",
        std::vector<size_t>{});
      nevent = std::numeric_limits<int>::min();
      current_statement__ = 184;
      nevent = context__.vals_i("nevent")[(1 - 1)];
      current_statement__ = 184;
      stan::math::check_greater_or_equal(function__, "nevent", nevent, 0);
      current_statement__ = 185;
      context__.validate_dims("data initialization", "nrcens", "int",
        std::vector<size_t>{});
      nrcens = std::numeric_limits<int>::min();
      current_statement__ = 185;
      nrcens = context__.vals_i("nrcens")[(1 - 1)];
      current_statement__ = 185;
      stan::math::check_greater_or_equal(function__, "nrcens", nrcens, 0);
      current_statement__ = 186;
      context__.validate_dims("data initialization", "nvars", "int",
        std::vector<size_t>{});
      nvars = std::numeric_limits<int>::min();
      current_statement__ = 186;
      nvars = context__.vals_i("nvars")[(1 - 1)];
      current_statement__ = 186;
      stan::math::check_greater_or_equal(function__, "nvars", nvars, 0);
      current_statement__ = 187;
      context__.validate_dims("data initialization", "nextern", "int",
        std::vector<size_t>{});
      nextern = std::numeric_limits<int>::min();
      current_statement__ = 187;
      nextern = context__.vals_i("nextern")[(1 - 1)];
      current_statement__ = 187;
      stan::math::check_greater_or_equal(function__, "nextern", nextern, 0);
      current_statement__ = 188;
      context__.validate_dims("data initialization", "ncovs", "int",
        std::vector<size_t>{});
      ncovs = std::numeric_limits<int>::min();
      current_statement__ = 188;
      ncovs = context__.vals_i("ncovs")[(1 - 1)];
      current_statement__ = 188;
      stan::math::check_greater_or_equal(function__, "ncovs", ncovs, 0);
      current_statement__ = 189;
      context__.validate_dims("data initialization", "ncurecovs", "int",
        std::vector<size_t>{});
      ncurecovs = std::numeric_limits<int>::min();
      current_statement__ = 189;
      ncurecovs = context__.vals_i("ncurecovs")[(1 - 1)];
      current_statement__ = 189;
      stan::math::check_greater_or_equal(function__, "ncurecovs", ncurecovs,
        0);
      current_statement__ = 190;
      context__.validate_dims("data initialization", "nnphcovs", "int",
        std::vector<size_t>{});
      nnphcovs = std::numeric_limits<int>::min();
      current_statement__ = 190;
      nnphcovs = context__.vals_i("nnphcovs")[(1 - 1)];
      current_statement__ = 190;
      stan::math::check_greater_or_equal(function__, "nnphcovs", nnphcovs, 0);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("basis_event", "nevent", nevent);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("basis_event", "nvars", nvars);
      current_statement__ = 193;
      context__.validate_dims("data initialization", "basis_event", "double",
        std::vector<size_t>{static_cast<size_t>(nevent),
          static_cast<size_t>(nvars)});
      basis_event_data__ = Eigen::Matrix<double,-1,-1>::Constant(nevent,
                             nvars, std::numeric_limits<double>::quiet_NaN());
      new (&basis_event)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(basis_event_data__.data(),
        nevent, nvars);
      {
        std::vector<local_scalar_t__> basis_event_flat__;
        current_statement__ = 193;
        basis_event_flat__ = context__.vals_r("basis_event");
        current_statement__ = 193;
        pos__ = 1;
        current_statement__ = 193;
        for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
          current_statement__ = 193;
          for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
            current_statement__ = 193;
            stan::model::assign(basis_event, basis_event_flat__[(pos__ - 1)],
              "assigning variable basis_event",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 193;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 194;
      stan::math::validate_non_negative_index("ibasis_event", "nevent",
        nevent);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("ibasis_event", "nvars", nvars);
      current_statement__ = 196;
      context__.validate_dims("data initialization", "ibasis_event",
        "double",
        std::vector<size_t>{static_cast<size_t>(nevent),
          static_cast<size_t>(nvars)});
      ibasis_event_data__ = Eigen::Matrix<double,-1,-1>::Constant(nevent,
                              nvars,
                              std::numeric_limits<double>::quiet_NaN());
      new (&ibasis_event)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ibasis_event_data__.data(),
        nevent, nvars);
      {
        std::vector<local_scalar_t__> ibasis_event_flat__;
        current_statement__ = 196;
        ibasis_event_flat__ = context__.vals_r("ibasis_event");
        current_statement__ = 196;
        pos__ = 1;
        current_statement__ = 196;
        for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
          current_statement__ = 196;
          for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
            current_statement__ = 196;
            stan::model::assign(ibasis_event, ibasis_event_flat__[(pos__ -
              1)], "assigning variable ibasis_event",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 196;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 197;
      stan::math::validate_non_negative_index("ibasis_rcens", "nrcens",
        nrcens);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("ibasis_rcens", "nvars", nvars);
      current_statement__ = 199;
      context__.validate_dims("data initialization", "ibasis_rcens",
        "double",
        std::vector<size_t>{static_cast<size_t>(nrcens),
          static_cast<size_t>(nvars)});
      ibasis_rcens_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrcens,
                              nvars,
                              std::numeric_limits<double>::quiet_NaN());
      new (&ibasis_rcens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ibasis_rcens_data__.data(),
        nrcens, nvars);
      {
        std::vector<local_scalar_t__> ibasis_rcens_flat__;
        current_statement__ = 199;
        ibasis_rcens_flat__ = context__.vals_r("ibasis_rcens");
        current_statement__ = 199;
        pos__ = 1;
        current_statement__ = 199;
        for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
          current_statement__ = 199;
          for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
            current_statement__ = 199;
            stan::model::assign(ibasis_rcens, ibasis_rcens_flat__[(pos__ -
              1)], "assigning variable ibasis_rcens",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 199;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 200;
      stan::math::validate_non_negative_index("ibasis_ext_stop", "nextern",
        nextern);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("ibasis_ext_stop", "nvars",
        nvars);
      current_statement__ = 202;
      context__.validate_dims("data initialization", "ibasis_ext_stop",
        "double",
        std::vector<size_t>{static_cast<size_t>(nextern),
          static_cast<size_t>(nvars)});
      ibasis_ext_stop_data__ = Eigen::Matrix<double,-1,-1>::Constant(nextern,
                                 nvars,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&ibasis_ext_stop)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ibasis_ext_stop_data__.data(),
        nextern, nvars);
      {
        std::vector<local_scalar_t__> ibasis_ext_stop_flat__;
        current_statement__ = 202;
        ibasis_ext_stop_flat__ = context__.vals_r("ibasis_ext_stop");
        current_statement__ = 202;
        pos__ = 1;
        current_statement__ = 202;
        for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
          current_statement__ = 202;
          for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
            current_statement__ = 202;
            stan::model::assign(ibasis_ext_stop,
              ibasis_ext_stop_flat__[(pos__ - 1)],
              "assigning variable ibasis_ext_stop",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 202;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 203;
      stan::math::validate_non_negative_index("ibasis_ext_start", "nextern",
        nextern);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("ibasis_ext_start", "nvars",
        nvars);
      current_statement__ = 205;
      context__.validate_dims("data initialization", "ibasis_ext_start",
        "double",
        std::vector<size_t>{static_cast<size_t>(nextern),
          static_cast<size_t>(nvars)});
      ibasis_ext_start_data__ = Eigen::Matrix<double,-1,-1>::Constant(nextern,
                                  nvars,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&ibasis_ext_start)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(ibasis_ext_start_data__.data(),
        nextern, nvars);
      {
        std::vector<local_scalar_t__> ibasis_ext_start_flat__;
        current_statement__ = 205;
        ibasis_ext_start_flat__ = context__.vals_r("ibasis_ext_start");
        current_statement__ = 205;
        pos__ = 1;
        current_statement__ = 205;
        for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
          current_statement__ = 205;
          for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
            current_statement__ = 205;
            stan::model::assign(ibasis_ext_start,
              ibasis_ext_start_flat__[(pos__ - 1)],
              "assigning variable ibasis_ext_start",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 205;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 206;
      stan::math::validate_non_negative_index("x_event", "nevent", nevent);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("x_event", "ncovs", ncovs);
      current_statement__ = 208;
      context__.validate_dims("data initialization", "x_event", "double",
        std::vector<size_t>{static_cast<size_t>(nevent),
          static_cast<size_t>(ncovs)});
      x_event_data__ = Eigen::Matrix<double,-1,-1>::Constant(nevent, ncovs,
                         std::numeric_limits<double>::quiet_NaN());
      new (&x_event)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_event_data__.data(),
        nevent, ncovs);
      {
        std::vector<local_scalar_t__> x_event_flat__;
        current_statement__ = 208;
        x_event_flat__ = context__.vals_r("x_event");
        current_statement__ = 208;
        pos__ = 1;
        current_statement__ = 208;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 208;
          for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
            current_statement__ = 208;
            stan::model::assign(x_event, x_event_flat__[(pos__ - 1)],
              "assigning variable x_event", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 208;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 209;
      stan::math::validate_non_negative_index("x_rcens", "nrcens", nrcens);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("x_rcens", "ncovs", ncovs);
      current_statement__ = 211;
      context__.validate_dims("data initialization", "x_rcens", "double",
        std::vector<size_t>{static_cast<size_t>(nrcens),
          static_cast<size_t>(ncovs)});
      x_rcens_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrcens, ncovs,
                         std::numeric_limits<double>::quiet_NaN());
      new (&x_rcens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_rcens_data__.data(),
        nrcens, ncovs);
      {
        std::vector<local_scalar_t__> x_rcens_flat__;
        current_statement__ = 211;
        x_rcens_flat__ = context__.vals_r("x_rcens");
        current_statement__ = 211;
        pos__ = 1;
        current_statement__ = 211;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 211;
          for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
            current_statement__ = 211;
            stan::model::assign(x_rcens, x_rcens_flat__[(pos__ - 1)],
              "assigning variable x_rcens", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 211;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 212;
      stan::math::validate_non_negative_index("xcure_event", "nevent", nevent);
      current_statement__ = 213;
      stan::math::validate_non_negative_index("xcure_event", "ncurecovs",
        ncurecovs);
      current_statement__ = 214;
      context__.validate_dims("data initialization", "xcure_event", "double",
        std::vector<size_t>{static_cast<size_t>(nevent),
          static_cast<size_t>(ncurecovs)});
      xcure_event_data__ = Eigen::Matrix<double,-1,-1>::Constant(nevent,
                             ncurecovs,
                             std::numeric_limits<double>::quiet_NaN());
      new (&xcure_event)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xcure_event_data__.data(),
        nevent, ncurecovs);
      {
        std::vector<local_scalar_t__> xcure_event_flat__;
        current_statement__ = 214;
        xcure_event_flat__ = context__.vals_r("xcure_event");
        current_statement__ = 214;
        pos__ = 1;
        current_statement__ = 214;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 214;
          for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
            current_statement__ = 214;
            stan::model::assign(xcure_event, xcure_event_flat__[(pos__ - 1)],
              "assigning variable xcure_event",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 214;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 215;
      stan::math::validate_non_negative_index("xcure_rcens", "nrcens", nrcens);
      current_statement__ = 216;
      stan::math::validate_non_negative_index("xcure_rcens", "ncurecovs",
        ncurecovs);
      current_statement__ = 217;
      context__.validate_dims("data initialization", "xcure_rcens", "double",
        std::vector<size_t>{static_cast<size_t>(nrcens),
          static_cast<size_t>(ncurecovs)});
      xcure_rcens_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrcens,
                             ncurecovs,
                             std::numeric_limits<double>::quiet_NaN());
      new (&xcure_rcens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xcure_rcens_data__.data(),
        nrcens, ncurecovs);
      {
        std::vector<local_scalar_t__> xcure_rcens_flat__;
        current_statement__ = 217;
        xcure_rcens_flat__ = context__.vals_r("xcure_rcens");
        current_statement__ = 217;
        pos__ = 1;
        current_statement__ = 217;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 217;
          for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
            current_statement__ = 217;
            stan::model::assign(xcure_rcens, xcure_rcens_flat__[(pos__ - 1)],
              "assigning variable xcure_rcens",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 217;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 218;
      stan::math::validate_non_negative_index("xnph_event", "nevent", nevent);
      current_statement__ = 219;
      stan::math::validate_non_negative_index("xnph_event", "nnphcovs",
        nnphcovs);
      current_statement__ = 220;
      context__.validate_dims("data initialization", "xnph_event", "double",
        std::vector<size_t>{static_cast<size_t>(nevent),
          static_cast<size_t>(nnphcovs)});
      xnph_event_data__ = Eigen::Matrix<double,-1,-1>::Constant(nevent,
                            nnphcovs,
                            std::numeric_limits<double>::quiet_NaN());
      new (&xnph_event)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xnph_event_data__.data(),
        nevent, nnphcovs);
      {
        std::vector<local_scalar_t__> xnph_event_flat__;
        current_statement__ = 220;
        xnph_event_flat__ = context__.vals_r("xnph_event");
        current_statement__ = 220;
        pos__ = 1;
        current_statement__ = 220;
        for (int sym1__ = 1; sym1__ <= nnphcovs; ++sym1__) {
          current_statement__ = 220;
          for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
            current_statement__ = 220;
            stan::model::assign(xnph_event, xnph_event_flat__[(pos__ - 1)],
              "assigning variable xnph_event",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 220;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 221;
      stan::math::validate_non_negative_index("xnph_rcens", "nrcens", nrcens);
      current_statement__ = 222;
      stan::math::validate_non_negative_index("xnph_rcens", "nnphcovs",
        nnphcovs);
      current_statement__ = 223;
      context__.validate_dims("data initialization", "xnph_rcens", "double",
        std::vector<size_t>{static_cast<size_t>(nrcens),
          static_cast<size_t>(nnphcovs)});
      xnph_rcens_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrcens,
                            nnphcovs,
                            std::numeric_limits<double>::quiet_NaN());
      new (&xnph_rcens)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xnph_rcens_data__.data(),
        nrcens, nnphcovs);
      {
        std::vector<local_scalar_t__> xnph_rcens_flat__;
        current_statement__ = 223;
        xnph_rcens_flat__ = context__.vals_r("xnph_rcens");
        current_statement__ = 223;
        pos__ = 1;
        current_statement__ = 223;
        for (int sym1__ = 1; sym1__ <= nnphcovs; ++sym1__) {
          current_statement__ = 223;
          for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
            current_statement__ = 223;
            stan::model::assign(xnph_rcens, xnph_rcens_flat__[(pos__ - 1)],
              "assigning variable xnph_rcens",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 223;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 224;
      stan::math::validate_non_negative_index("r_ext", "nextern", nextern);
      current_statement__ = 225;
      context__.validate_dims("data initialization", "r_ext", "int",
        std::vector<size_t>{static_cast<size_t>(nextern)});
      r_ext = std::vector<int>(nextern, std::numeric_limits<int>::min());
      current_statement__ = 225;
      r_ext = context__.vals_i("r_ext");
      current_statement__ = 225;
      stan::math::check_greater_or_equal(function__, "r_ext", r_ext, 0);
      current_statement__ = 226;
      stan::math::validate_non_negative_index("n_ext", "nextern", nextern);
      current_statement__ = 227;
      context__.validate_dims("data initialization", "n_ext", "int",
        std::vector<size_t>{static_cast<size_t>(nextern)});
      n_ext = std::vector<int>(nextern, std::numeric_limits<int>::min());
      current_statement__ = 227;
      n_ext = context__.vals_i("n_ext");
      current_statement__ = 227;
      stan::math::check_greater_or_equal(function__, "n_ext", n_ext, 0);
      current_statement__ = 228;
      stan::math::validate_non_negative_index("x_ext", "nextern", nextern);
      current_statement__ = 229;
      stan::math::validate_non_negative_index("x_ext", "ncovs", ncovs);
      current_statement__ = 230;
      context__.validate_dims("data initialization", "x_ext", "double",
        std::vector<size_t>{static_cast<size_t>(nextern),
          static_cast<size_t>(ncovs)});
      x_ext_data__ = Eigen::Matrix<double,-1,-1>::Constant(nextern, ncovs,
                       std::numeric_limits<double>::quiet_NaN());
      new (&x_ext)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_ext_data__.data(), nextern,
        ncovs);
      {
        std::vector<local_scalar_t__> x_ext_flat__;
        current_statement__ = 230;
        x_ext_flat__ = context__.vals_r("x_ext");
        current_statement__ = 230;
        pos__ = 1;
        current_statement__ = 230;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 230;
          for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
            current_statement__ = 230;
            stan::model::assign(x_ext, x_ext_flat__[(pos__ - 1)],
              "assigning variable x_ext", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 230;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 231;
      stan::math::validate_non_negative_index("xcure_ext", "nextern", nextern);
      current_statement__ = 232;
      stan::math::validate_non_negative_index("xcure_ext", "ncurecovs",
        ncurecovs);
      current_statement__ = 233;
      context__.validate_dims("data initialization", "xcure_ext", "double",
        std::vector<size_t>{static_cast<size_t>(nextern),
          static_cast<size_t>(ncurecovs)});
      xcure_ext_data__ = Eigen::Matrix<double,-1,-1>::Constant(nextern,
                           ncurecovs,
                           std::numeric_limits<double>::quiet_NaN());
      new (&xcure_ext)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xcure_ext_data__.data(),
        nextern, ncurecovs);
      {
        std::vector<local_scalar_t__> xcure_ext_flat__;
        current_statement__ = 233;
        xcure_ext_flat__ = context__.vals_r("xcure_ext");
        current_statement__ = 233;
        pos__ = 1;
        current_statement__ = 233;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 233;
          for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
            current_statement__ = 233;
            stan::model::assign(xcure_ext, xcure_ext_flat__[(pos__ - 1)],
              "assigning variable xcure_ext", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 233;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 234;
      stan::math::validate_non_negative_index("xnph_ext", "nextern", nextern);
      current_statement__ = 235;
      stan::math::validate_non_negative_index("xnph_ext", "nnphcovs",
        nnphcovs);
      current_statement__ = 236;
      context__.validate_dims("data initialization", "xnph_ext", "double",
        std::vector<size_t>{static_cast<size_t>(nextern),
          static_cast<size_t>(nnphcovs)});
      xnph_ext_data__ = Eigen::Matrix<double,-1,-1>::Constant(nextern,
                          nnphcovs, std::numeric_limits<double>::quiet_NaN());
      new (&xnph_ext)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xnph_ext_data__.data(),
        nextern, nnphcovs);
      {
        std::vector<local_scalar_t__> xnph_ext_flat__;
        current_statement__ = 236;
        xnph_ext_flat__ = context__.vals_r("xnph_ext");
        current_statement__ = 236;
        pos__ = 1;
        current_statement__ = 236;
        for (int sym1__ = 1; sym1__ <= nnphcovs; ++sym1__) {
          current_statement__ = 236;
          for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
            current_statement__ = 236;
            stan::model::assign(xnph_ext, xnph_ext_flat__[(pos__ - 1)],
              "assigning variable xnph_ext", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 236;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 237;
      stan::math::validate_non_negative_index("b_mean", "nvars - 1", (nvars -
        1));
      current_statement__ = 238;
      context__.validate_dims("data initialization", "b_mean", "double",
        std::vector<size_t>{static_cast<size_t>((nvars - 1))});
      b_mean_data__ = Eigen::Matrix<double,-1,1>::Constant((nvars - 1),
                        std::numeric_limits<double>::quiet_NaN());
      new (&b_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(b_mean_data__.data(), (nvars -
        1));
      {
        std::vector<local_scalar_t__> b_mean_flat__;
        current_statement__ = 238;
        b_mean_flat__ = context__.vals_r("b_mean");
        current_statement__ = 238;
        pos__ = 1;
        current_statement__ = 238;
        for (int sym1__ = 1; sym1__ <= (nvars - 1); ++sym1__) {
          current_statement__ = 238;
          stan::model::assign(b_mean, b_mean_flat__[(pos__ - 1)],
            "assigning variable b_mean", stan::model::index_uni(sym1__));
          current_statement__ = 238;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 239;
      context__.validate_dims("data initialization", "est_hsd", "int",
        std::vector<size_t>{});
      est_hsd = std::numeric_limits<int>::min();
      current_statement__ = 239;
      est_hsd = context__.vals_i("est_hsd")[(1 - 1)];
      current_statement__ = 240;
      stan::math::validate_non_negative_index("hsd_fixed", "1 - est_hsd", (1
        - est_hsd));
      current_statement__ = 241;
      context__.validate_dims("data initialization", "hsd_fixed", "double",
        std::vector<size_t>{static_cast<size_t>((1 - est_hsd))});
      hsd_fixed_data__ = Eigen::Matrix<double,-1,1>::Constant((1 - est_hsd),
                           std::numeric_limits<double>::quiet_NaN());
      new (&hsd_fixed)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(hsd_fixed_data__.data(), (1 -
        est_hsd));
      {
        std::vector<local_scalar_t__> hsd_fixed_flat__;
        current_statement__ = 241;
        hsd_fixed_flat__ = context__.vals_r("hsd_fixed");
        current_statement__ = 241;
        pos__ = 1;
        current_statement__ = 241;
        for (int sym1__ = 1; sym1__ <= (1 - est_hsd); ++sym1__) {
          current_statement__ = 241;
          stan::model::assign(hsd_fixed, hsd_fixed_flat__[(pos__ - 1)],
            "assigning variable hsd_fixed", stan::model::index_uni(sym1__));
          current_statement__ = 241;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 241;
      stan::math::check_greater_or_equal(function__, "hsd_fixed", hsd_fixed,
        0);
      current_statement__ = 242;
      context__.validate_dims("data initialization", "smooth_model", "int",
        std::vector<size_t>{});
      smooth_model = std::numeric_limits<int>::min();
      current_statement__ = 242;
      smooth_model = context__.vals_i("smooth_model")[(1 - 1)];
      current_statement__ = 242;
      stan::math::check_greater_or_equal(function__, "smooth_model",
        smooth_model, 1);
      current_statement__ = 243;
      stan::math::validate_non_negative_index("sqrt_wt", "nvars - 1", (nvars
        - 1));
      current_statement__ = 244;
      context__.validate_dims("data initialization", "sqrt_wt", "double",
        std::vector<size_t>{static_cast<size_t>((nvars - 1))});
      sqrt_wt_data__ = Eigen::Matrix<double,-1,1>::Constant((nvars - 1),
                         std::numeric_limits<double>::quiet_NaN());
      new (&sqrt_wt)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sqrt_wt_data__.data(), (nvars
        - 1));
      {
        std::vector<local_scalar_t__> sqrt_wt_flat__;
        current_statement__ = 244;
        sqrt_wt_flat__ = context__.vals_r("sqrt_wt");
        current_statement__ = 244;
        pos__ = 1;
        current_statement__ = 244;
        for (int sym1__ = 1; sym1__ <= (nvars - 1); ++sym1__) {
          current_statement__ = 244;
          stan::model::assign(sqrt_wt, sqrt_wt_flat__[(pos__ - 1)],
            "assigning variable sqrt_wt", stan::model::index_uni(sym1__));
          current_statement__ = 244;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 245;
      context__.validate_dims("data initialization", "cure", "int",
        std::vector<size_t>{});
      cure = std::numeric_limits<int>::min();
      current_statement__ = 245;
      cure = context__.vals_i("cure")[(1 - 1)];
      current_statement__ = 246;
      context__.validate_dims("data initialization", "relative", "int",
        std::vector<size_t>{});
      relative = std::numeric_limits<int>::min();
      current_statement__ = 246;
      relative = context__.vals_i("relative")[(1 - 1)];
      current_statement__ = 247;
      stan::math::validate_non_negative_index("backhaz_event", "nevent",
        nevent);
      current_statement__ = 248;
      context__.validate_dims("data initialization", "backhaz_event",
        "double", std::vector<size_t>{static_cast<size_t>(nevent)});
      backhaz_event_data__ = Eigen::Matrix<double,-1,1>::Constant(nevent,
                               std::numeric_limits<double>::quiet_NaN());
      new (&backhaz_event)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(backhaz_event_data__.data(),
        nevent);
      {
        std::vector<local_scalar_t__> backhaz_event_flat__;
        current_statement__ = 248;
        backhaz_event_flat__ = context__.vals_r("backhaz_event");
        current_statement__ = 248;
        pos__ = 1;
        current_statement__ = 248;
        for (int sym1__ = 1; sym1__ <= nevent; ++sym1__) {
          current_statement__ = 248;
          stan::model::assign(backhaz_event, backhaz_event_flat__[(pos__ -
            1)], "assigning variable backhaz_event",
            stan::model::index_uni(sym1__));
          current_statement__ = 248;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 249;
      stan::math::validate_non_negative_index("backsurv_ext_start",
        "nextern", nextern);
      current_statement__ = 250;
      context__.validate_dims("data initialization", "backsurv_ext_start",
        "double", std::vector<size_t>{static_cast<size_t>(nextern)});
      backsurv_ext_start_data__ = Eigen::Matrix<double,-1,1>::Constant(nextern,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&backsurv_ext_start)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(backsurv_ext_start_data__.data(),
        nextern);
      {
        std::vector<local_scalar_t__> backsurv_ext_start_flat__;
        current_statement__ = 250;
        backsurv_ext_start_flat__ = context__.vals_r("backsurv_ext_start");
        current_statement__ = 250;
        pos__ = 1;
        current_statement__ = 250;
        for (int sym1__ = 1; sym1__ <= nextern; ++sym1__) {
          current_statement__ = 250;
          stan::model::assign(backsurv_ext_start,
            backsurv_ext_start_flat__[(pos__ - 1)],
            "assigning variable backsurv_ext_start",
            stan::model::index_uni(sym1__));
          current_statement__ = 250;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 251;
      stan::math::validate_non_negative_index("backsurv_ext_stop", "nextern",
        nextern);
      current_statement__ = 252;
      context__.validate_dims("data initialization", "backsurv_ext_stop",
        "double", std::vector<size_t>{static_cast<size_t>(nextern)});
      backsurv_ext_stop_data__ = Eigen::Matrix<double,-1,1>::Constant(nextern,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&backsurv_ext_stop)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(backsurv_ext_stop_data__.data(),
        nextern);
      {
        std::vector<local_scalar_t__> backsurv_ext_stop_flat__;
        current_statement__ = 252;
        backsurv_ext_stop_flat__ = context__.vals_r("backsurv_ext_stop");
        current_statement__ = 252;
        pos__ = 1;
        current_statement__ = 252;
        for (int sym1__ = 1; sym1__ <= nextern; ++sym1__) {
          current_statement__ = 252;
          stan::model::assign(backsurv_ext_stop,
            backsurv_ext_stop_flat__[(pos__ - 1)],
            "assigning variable backsurv_ext_stop",
            stan::model::index_uni(sym1__));
          current_statement__ = 252;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 253;
      context__.validate_dims("data initialization", "prior_hscale_dist",
        "int", std::vector<size_t>{});
      prior_hscale_dist = std::numeric_limits<int>::min();
      current_statement__ = 253;
      prior_hscale_dist = context__.vals_i("prior_hscale_dist")[(1 - 1)];
      current_statement__ = 254;
      context__.validate_dims("data initialization", "prior_hscale",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_hscale_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_hscale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_hscale_data__.data(), 3);
      {
        std::vector<local_scalar_t__> prior_hscale_flat__;
        current_statement__ = 254;
        prior_hscale_flat__ = context__.vals_r("prior_hscale");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 254;
          stan::model::assign(prior_hscale, prior_hscale_flat__[(pos__ - 1)],
            "assigning variable prior_hscale", stan::model::index_uni(sym1__));
          current_statement__ = 254;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 255;
      context__.validate_dims("data initialization", "prior_cure", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      prior_cure_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_cure)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_cure_data__.data(), 2);
      {
        std::vector<local_scalar_t__> prior_cure_flat__;
        current_statement__ = 255;
        prior_cure_flat__ = context__.vals_r("prior_cure");
        current_statement__ = 255;
        pos__ = 1;
        current_statement__ = 255;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 255;
          stan::model::assign(prior_cure, prior_cure_flat__[(pos__ - 1)],
            "assigning variable prior_cure", stan::model::index_uni(sym1__));
          current_statement__ = 255;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 255;
      stan::math::check_greater_or_equal(function__, "prior_cure",
        prior_cure, 0);
      current_statement__ = 256;
      stan::math::validate_non_negative_index("prior_hsd", "2 * est_hsd", (2
        * est_hsd));
      current_statement__ = 257;
      context__.validate_dims("data initialization", "prior_hsd", "double",
        std::vector<size_t>{static_cast<size_t>((2 * est_hsd))});
      prior_hsd_data__ = Eigen::Matrix<double,-1,1>::Constant((2 * est_hsd),
                           std::numeric_limits<double>::quiet_NaN());
      new (&prior_hsd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_hsd_data__.data(), (2 *
        est_hsd));
      {
        std::vector<local_scalar_t__> prior_hsd_flat__;
        current_statement__ = 257;
        prior_hsd_flat__ = context__.vals_r("prior_hsd");
        current_statement__ = 257;
        pos__ = 1;
        current_statement__ = 257;
        for (int sym1__ = 1; sym1__ <= (2 * est_hsd); ++sym1__) {
          current_statement__ = 257;
          stan::model::assign(prior_hsd, prior_hsd_flat__[(pos__ - 1)],
            "assigning variable prior_hsd", stan::model::index_uni(sym1__));
          current_statement__ = 257;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 257;
      stan::math::check_greater_or_equal(function__, "prior_hsd", prior_hsd,
        0);
      current_statement__ = 258;
      stan::math::validate_non_negative_index("prior_loghr_dist", "ncovs",
        ncovs);
      current_statement__ = 259;
      context__.validate_dims("data initialization", "prior_loghr_dist",
        "int", std::vector<size_t>{static_cast<size_t>(ncovs)});
      prior_loghr_dist = std::vector<int>(ncovs,
                           std::numeric_limits<int>::min());
      current_statement__ = 259;
      prior_loghr_dist = context__.vals_i("prior_loghr_dist");
      current_statement__ = 259;
      stan::math::check_greater_or_equal(function__, "prior_loghr_dist",
        prior_loghr_dist, 0);
      current_statement__ = 260;
      stan::math::validate_non_negative_index("prior_loghr_location",
        "ncovs", ncovs);
      current_statement__ = 261;
      context__.validate_dims("data initialization", "prior_loghr_location",
        "double", std::vector<size_t>{static_cast<size_t>(ncovs)});
      prior_loghr_location_data__ = Eigen::Matrix<double,-1,1>::Constant(ncovs,
                                      std::numeric_limits<double>::quiet_NaN());
      new (&prior_loghr_location)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_loghr_location_data__.data(),
        ncovs);
      {
        std::vector<local_scalar_t__> prior_loghr_location_flat__;
        current_statement__ = 261;
        prior_loghr_location_flat__ = context__.vals_r("prior_loghr_location");
        current_statement__ = 261;
        pos__ = 1;
        current_statement__ = 261;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 261;
          stan::model::assign(prior_loghr_location,
            prior_loghr_location_flat__[(pos__ - 1)],
            "assigning variable prior_loghr_location",
            stan::model::index_uni(sym1__));
          current_statement__ = 261;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 262;
      stan::math::validate_non_negative_index("prior_loghr_scale", "ncovs",
        ncovs);
      current_statement__ = 263;
      context__.validate_dims("data initialization", "prior_loghr_scale",
        "double", std::vector<size_t>{static_cast<size_t>(ncovs)});
      prior_loghr_scale_data__ = Eigen::Matrix<double,-1,1>::Constant(ncovs,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&prior_loghr_scale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_loghr_scale_data__.data(),
        ncovs);
      {
        std::vector<local_scalar_t__> prior_loghr_scale_flat__;
        current_statement__ = 263;
        prior_loghr_scale_flat__ = context__.vals_r("prior_loghr_scale");
        current_statement__ = 263;
        pos__ = 1;
        current_statement__ = 263;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 263;
          stan::model::assign(prior_loghr_scale,
            prior_loghr_scale_flat__[(pos__ - 1)],
            "assigning variable prior_loghr_scale",
            stan::model::index_uni(sym1__));
          current_statement__ = 263;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 264;
      stan::math::validate_non_negative_index("prior_loghr_df", "ncovs",
        ncovs);
      current_statement__ = 265;
      context__.validate_dims("data initialization", "prior_loghr_df",
        "double", std::vector<size_t>{static_cast<size_t>(ncovs)});
      prior_loghr_df_data__ = Eigen::Matrix<double,-1,1>::Constant(ncovs,
                                std::numeric_limits<double>::quiet_NaN());
      new (&prior_loghr_df)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_loghr_df_data__.data(),
        ncovs);
      {
        std::vector<local_scalar_t__> prior_loghr_df_flat__;
        current_statement__ = 265;
        prior_loghr_df_flat__ = context__.vals_r("prior_loghr_df");
        current_statement__ = 265;
        pos__ = 1;
        current_statement__ = 265;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 265;
          stan::model::assign(prior_loghr_df, prior_loghr_df_flat__[(pos__ -
            1)], "assigning variable prior_loghr_df",
            stan::model::index_uni(sym1__));
          current_statement__ = 265;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 266;
      stan::math::validate_non_negative_index("prior_logor_cure_dist",
        "ncurecovs", ncurecovs);
      current_statement__ = 267;
      context__.validate_dims("data initialization", "prior_logor_cure_dist",
        "int", std::vector<size_t>{static_cast<size_t>(ncurecovs)});
      prior_logor_cure_dist = std::vector<int>(ncurecovs,
                                std::numeric_limits<int>::min());
      current_statement__ = 267;
      prior_logor_cure_dist = context__.vals_i("prior_logor_cure_dist");
      current_statement__ = 267;
      stan::math::check_greater_or_equal(function__, "prior_logor_cure_dist",
        prior_logor_cure_dist, 0);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("prior_logor_cure_location",
        "ncurecovs", ncurecovs);
      current_statement__ = 269;
      context__.validate_dims("data initialization",
        "prior_logor_cure_location", "double",
        std::vector<size_t>{static_cast<size_t>(ncurecovs)});
      prior_logor_cure_location_data__ = Eigen::Matrix<double,-1,1>::Constant(ncurecovs,
                                           std::numeric_limits<double>::quiet_NaN(
                                             ));
      new (&prior_logor_cure_location)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_logor_cure_location_data__.data(),
        ncurecovs);
      {
        std::vector<local_scalar_t__> prior_logor_cure_location_flat__;
        current_statement__ = 269;
        prior_logor_cure_location_flat__ = context__.vals_r("prior_logor_cure_location");
        current_statement__ = 269;
        pos__ = 1;
        current_statement__ = 269;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 269;
          stan::model::assign(prior_logor_cure_location,
            prior_logor_cure_location_flat__[(pos__ - 1)],
            "assigning variable prior_logor_cure_location",
            stan::model::index_uni(sym1__));
          current_statement__ = 269;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 270;
      stan::math::validate_non_negative_index("prior_logor_cure_scale",
        "ncurecovs", ncurecovs);
      current_statement__ = 271;
      context__.validate_dims("data initialization",
        "prior_logor_cure_scale", "double",
        std::vector<size_t>{static_cast<size_t>(ncurecovs)});
      prior_logor_cure_scale_data__ = Eigen::Matrix<double,-1,1>::Constant(ncurecovs,
                                        std::numeric_limits<double>::quiet_NaN(
                                          ));
      new (&prior_logor_cure_scale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_logor_cure_scale_data__.data(),
        ncurecovs);
      {
        std::vector<local_scalar_t__> prior_logor_cure_scale_flat__;
        current_statement__ = 271;
        prior_logor_cure_scale_flat__ = context__.vals_r("prior_logor_cure_scale");
        current_statement__ = 271;
        pos__ = 1;
        current_statement__ = 271;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 271;
          stan::model::assign(prior_logor_cure_scale,
            prior_logor_cure_scale_flat__[(pos__ - 1)],
            "assigning variable prior_logor_cure_scale",
            stan::model::index_uni(sym1__));
          current_statement__ = 271;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 272;
      stan::math::validate_non_negative_index("prior_logor_cure_df",
        "ncurecovs", ncurecovs);
      current_statement__ = 273;
      context__.validate_dims("data initialization", "prior_logor_cure_df",
        "double", std::vector<size_t>{static_cast<size_t>(ncurecovs)});
      prior_logor_cure_df_data__ = Eigen::Matrix<double,-1,1>::Constant(ncurecovs,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&prior_logor_cure_df)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_logor_cure_df_data__.data(),
        ncurecovs);
      {
        std::vector<local_scalar_t__> prior_logor_cure_df_flat__;
        current_statement__ = 273;
        prior_logor_cure_df_flat__ = context__.vals_r("prior_logor_cure_df");
        current_statement__ = 273;
        pos__ = 1;
        current_statement__ = 273;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 273;
          stan::model::assign(prior_logor_cure_df,
            prior_logor_cure_df_flat__[(pos__ - 1)],
            "assigning variable prior_logor_cure_df",
            stan::model::index_uni(sym1__));
          current_statement__ = 273;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 274;
      context__.validate_dims("data initialization", "modelid", "int",
        std::vector<size_t>{});
      modelid = std::numeric_limits<int>::min();
      current_statement__ = 274;
      modelid = context__.vals_i("modelid")[(1 - 1)];
      current_statement__ = 275;
      stan::math::validate_non_negative_index("prior_hrsd", "nnphcovs",
        nnphcovs);
      current_statement__ = 276;
      context__.validate_dims("data initialization", "prior_hrsd", "double",
        std::vector<size_t>{static_cast<size_t>(nnphcovs),
          static_cast<size_t>(2)});
      prior_hrsd_data__ = Eigen::Matrix<double,-1,-1>::Constant(nnphcovs, 2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_hrsd)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_hrsd_data__.data(),
        nnphcovs, 2);
      {
        std::vector<local_scalar_t__> prior_hrsd_flat__;
        current_statement__ = 276;
        prior_hrsd_flat__ = context__.vals_r("prior_hrsd");
        current_statement__ = 276;
        pos__ = 1;
        current_statement__ = 276;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 276;
          for (int sym2__ = 1; sym2__ <= nnphcovs; ++sym2__) {
            current_statement__ = 276;
            stan::model::assign(prior_hrsd, prior_hrsd_flat__[(pos__ - 1)],
              "assigning variable prior_hrsd",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 276;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 277;
      stan::math::validate_non_negative_index("gamma", "1", 1);
      current_statement__ = 278;
      stan::math::validate_non_negative_index("loghr", "ncovs", ncovs);
      current_statement__ = 279;
      b_err_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 279;
      b_err_1dim__ = (nvars - 1);
      current_statement__ = 279;
      stan::math::validate_non_negative_index("b_err", "nvars - 1",
        b_err_1dim__);
      current_statement__ = 280;
      stan::math::validate_non_negative_index("hsd", "est_hsd", est_hsd);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("pcure", "cure", cure);
      current_statement__ = 282;
      stan::math::validate_non_negative_index("logor_cure", "ncurecovs",
        ncurecovs);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("hrsd", "nnphcovs", nnphcovs);
      current_statement__ = 284;
      stan::math::validate_non_negative_index("nperr", "nnphcovs", nnphcovs);
      current_statement__ = 285;
      nperr_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 285;
      nperr_2dim__ = (nvars - 1);
      current_statement__ = 285;
      stan::math::validate_non_negative_index("nperr", "nvars - 1",
        nperr_2dim__);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("b", "nvars", nvars);
      current_statement__ = 287;
      stan::math::validate_non_negative_index("coefs", "nvars", nvars);
      current_statement__ = 288;
      stan::math::validate_non_negative_index("coefs_event", "nevent", nevent);
      current_statement__ = 289;
      stan::math::validate_non_negative_index("coefs_event", "nvars", nvars);
      current_statement__ = 290;
      stan::math::validate_non_negative_index("coefs_rcens", "nrcens", nrcens);
      current_statement__ = 291;
      stan::math::validate_non_negative_index("coefs_rcens", "nvars", nvars);
      current_statement__ = 292;
      stan::math::validate_non_negative_index("coefs_extern", "nextern",
        nextern);
      current_statement__ = 293;
      stan::math::validate_non_negative_index("coefs_extern", "nvars", nvars);
      current_statement__ = 294;
      stan::math::validate_non_negative_index("b_event", "nevent", nevent);
      current_statement__ = 295;
      stan::math::validate_non_negative_index("b_event", "nvars", nvars);
      current_statement__ = 296;
      stan::math::validate_non_negative_index("b_rcens", "nrcens", nrcens);
      current_statement__ = 297;
      stan::math::validate_non_negative_index("b_rcens", "nvars", nvars);
      current_statement__ = 298;
      stan::math::validate_non_negative_index("b_extern", "nextern", nextern);
      current_statement__ = 299;
      stan::math::validate_non_negative_index("b_extern", "nvars", nvars);
      current_statement__ = 300;
      stan::math::validate_non_negative_index("b_np", "nnphcovs", nnphcovs);
      current_statement__ = 301;
      b_np_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 301;
      b_np_2dim__ = (nvars - 1);
      current_statement__ = 301;
      stan::math::validate_non_negative_index("b_np", "nvars - 1",
        b_np_2dim__);
      current_statement__ = 302;
      stan::math::validate_non_negative_index("hr", "ncovs", ncovs);
      current_statement__ = 303;
      stan::math::validate_non_negative_index("or_cure", "ncurecovs",
        ncurecovs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + ncovs + b_err_1dim__ + est_hsd + cure + ncurecovs +
      nnphcovs + (nnphcovs * nperr_2dim__);
  }
  inline std::string model_name() const final {
    return "model_survextrap";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_survextrap_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      gamma = in__.template read<std::vector<local_scalar_t__>>(1);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncovs, DUMMY_VAR__);
      current_statement__ = 2;
      loghr = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncovs);
      Eigen::Matrix<local_scalar_t__,-1,1> b_err =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(b_err_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      b_err = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(b_err_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> hsd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_hsd, DUMMY_VAR__);
      current_statement__ = 4;
      hsd = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              est_hsd);
      Eigen::Matrix<local_scalar_t__,-1,1> pcure =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(cure, DUMMY_VAR__);
      current_statement__ = 5;
      pcure = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
                cure);
      Eigen::Matrix<local_scalar_t__,-1,1> logor_cure =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncurecovs,
          DUMMY_VAR__);
      current_statement__ = 6;
      logor_cure = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(ncurecovs);
      Eigen::Matrix<local_scalar_t__,-1,1> hrsd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nnphcovs, DUMMY_VAR__);
      current_statement__ = 7;
      hrsd = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               nnphcovs);
      Eigen::Matrix<local_scalar_t__,-1,-1> nperr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nnphcovs,
          nperr_2dim__, DUMMY_VAR__);
      current_statement__ = 8;
      nperr = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(nnphcovs,
                nperr_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nvars, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> coefs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nvars, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> coefs_event =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nevent, nvars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> coefs_rcens =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nrcens, nvars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> coefs_extern =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nextern, nvars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_event =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nevent, nvars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_rcens =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nrcens, nvars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_extern =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nextern, nvars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_np =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nnphcovs,
          b_np_2dim__, DUMMY_VAR__);
      local_scalar_t__ ssd = DUMMY_VAR__;
      current_statement__ = 92;
      if (stan::math::logical_gt(nnphcovs, 0)) {
        current_statement__ = 56;
        for (int r = 1; r <= nnphcovs; ++r) {
          current_statement__ = 54;
          stan::model::assign(b_np,
            stan::math::multiply(
              stan::model::rvalue(hrsd, "hrsd", stan::model::index_uni(r)),
              stan::model::rvalue(nperr, "nperr", stan::model::index_uni(r),
                stan::model::index_min_max(1, (nvars - 1)))),
            "assigning variable b_np", stan::model::index_uni(r),
            stan::model::index_min_max(1, (nvars - 1)));
        }
        current_statement__ = 61;
        if (est_hsd) {
          current_statement__ = 59;
          ssd = stan::model::rvalue(hsd, "hsd", stan::model::index_uni(1));
        } else {
          current_statement__ = 57;
          ssd = stan::model::rvalue(hsd_fixed, "hsd_fixed",
                  stan::model::index_uni(1));
        }
        current_statement__ = 62;
        stan::model::assign(b,
          stan::math::append_row(0,
            stan::math::add(b_mean, stan::math::multiply(b_err, ssd))),
          "assigning variable b");
        current_statement__ = 63;
        stan::model::assign(coefs, stan::math::softmax(b),
          "assigning variable coefs");
        current_statement__ = 72;
        if (stan::math::logical_gt(nevent, 0)) {
          current_statement__ = 64;
          stan::model::assign(b_event, stan::math::rep_vector(0, nevent),
            "assigning variable b_event",
            stan::model::index_min_max(1, nevent), stan::model::index_uni(1));
          current_statement__ = 67;
          for (int j = 1; j <= (nvars - 1); ++j) {
            current_statement__ = 65;
            stan::model::assign(b_event,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(b_mean, "b_mean",
                    stan::model::index_uni(j)),
                  stan::math::multiply(xnph_event,
                    stan::model::rvalue(b_np, "b_np",
                      stan::model::index_omni(), stan::model::index_uni(j)))),
                (stan::model::rvalue(b_err, "b_err",
                   stan::model::index_uni(j)) * ssd)),
              "assigning variable b_event",
              stan::model::index_min_max(1, nevent),
              stan::model::index_uni((j + 1)));
          }
          current_statement__ = 70;
          for (int i = 1; i <= nevent; ++i) {
            current_statement__ = 68;
            stan::model::assign(coefs_event,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::to_vector(
                    stan::model::rvalue(b_event, "b_event",
                      stan::model::index_uni(i),
                      stan::model::index_min_max(1, nvars))))),
              "assigning variable coefs_event", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 81;
        if (stan::math::logical_gt(nrcens, 0)) {
          current_statement__ = 73;
          stan::model::assign(b_rcens, stan::math::rep_vector(0, nrcens),
            "assigning variable b_rcens",
            stan::model::index_min_max(1, nrcens), stan::model::index_uni(1));
          current_statement__ = 76;
          for (int j = 1; j <= (nvars - 1); ++j) {
            current_statement__ = 74;
            stan::model::assign(b_rcens,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(b_mean, "b_mean",
                    stan::model::index_uni(j)),
                  stan::math::multiply(xnph_rcens,
                    stan::model::rvalue(b_np, "b_np",
                      stan::model::index_omni(), stan::model::index_uni(j)))),
                (stan::model::rvalue(b_err, "b_err",
                   stan::model::index_uni(j)) * ssd)),
              "assigning variable b_rcens",
              stan::model::index_min_max(1, nrcens),
              stan::model::index_uni((j + 1)));
          }
          current_statement__ = 79;
          for (int i = 1; i <= nrcens; ++i) {
            current_statement__ = 77;
            stan::model::assign(coefs_rcens,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::to_vector(
                    stan::model::rvalue(b_rcens, "b_rcens",
                      stan::model::index_uni(i),
                      stan::model::index_min_max(1, nvars))))),
              "assigning variable coefs_rcens", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 90;
        if (stan::math::logical_gt(nextern, 0)) {
          current_statement__ = 82;
          stan::model::assign(b_extern, stan::math::rep_vector(0, nextern),
            "assigning variable b_extern",
            stan::model::index_min_max(1, nextern), stan::model::index_uni(1));
          current_statement__ = 85;
          for (int j = 1; j <= (nvars - 1); ++j) {
            current_statement__ = 83;
            stan::model::assign(b_extern,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(b_mean, "b_mean",
                    stan::model::index_uni(j)),
                  stan::math::multiply(xnph_ext,
                    stan::model::rvalue(b_np, "b_np",
                      stan::model::index_omni(), stan::model::index_uni(j)))),
                (stan::model::rvalue(b_err, "b_err",
                   stan::model::index_uni(j)) * ssd)),
              "assigning variable b_extern",
              stan::model::index_min_max(1, nextern),
              stan::model::index_uni((j + 1)));
          }
          current_statement__ = 88;
          for (int i = 1; i <= nextern; ++i) {
            current_statement__ = 86;
            stan::model::assign(coefs_extern,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::to_vector(
                    stan::model::rvalue(b_extern, "b_extern",
                      stan::model::index_uni(i),
                      stan::model::index_min_max(1, nvars))))),
              "assigning variable coefs_extern", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
      } else {
        current_statement__ = 24;
        if (est_hsd) {
          current_statement__ = 23;
          stan::model::assign(b,
            stan::math::append_row(0,
              stan::math::add(b_mean,
                stan::math::multiply(b_err,
                  stan::model::rvalue(hsd, "hsd", stan::model::index_uni(1))))),
            "assigning variable b");
        } else {
          current_statement__ = 22;
          stan::model::assign(b,
            stan::math::append_row(0,
              stan::math::add(b_mean,
                stan::math::multiply(b_err,
                  stan::model::rvalue(hsd_fixed, "hsd_fixed",
                    stan::model::index_uni(1))))), "assigning variable b");
        }
        current_statement__ = 25;
        stan::model::assign(coefs, stan::math::softmax(b),
          "assigning variable coefs");
        current_statement__ = 30;
        if (stan::math::logical_gt(nevent, 0)) {
          current_statement__ = 28;
          for (int i = 1; i <= nevent; ++i) {
            current_statement__ = 26;
            stan::model::assign(coefs_event,
              stan::math::to_row_vector(coefs),
              "assigning variable coefs_event", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 35;
        if (stan::math::logical_gt(nrcens, 0)) {
          current_statement__ = 33;
          for (int i = 1; i <= nrcens; ++i) {
            current_statement__ = 31;
            stan::model::assign(coefs_rcens,
              stan::math::to_row_vector(coefs),
              "assigning variable coefs_rcens", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 40;
        if (stan::math::logical_gt(nextern, 0)) {
          current_statement__ = 38;
          for (int i = 1; i <= nextern; ++i) {
            current_statement__ = 36;
            stan::model::assign(coefs_extern,
              stan::math::to_row_vector(coefs),
              "assigning variable coefs_extern", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 51;
        for (int j = 1; j <= nvars; ++j) {
          current_statement__ = 43;
          if (stan::math::logical_gt(nevent, 0)) {
            current_statement__ = 41;
            stan::model::assign(b_event, stan::math::rep_vector(0, nevent),
              "assigning variable b_event",
              stan::model::index_min_max(1, nevent),
              stan::model::index_uni(j));
          }
          current_statement__ = 46;
          if (stan::math::logical_gt(nrcens, 0)) {
            current_statement__ = 44;
            stan::model::assign(b_rcens, stan::math::rep_vector(0, nrcens),
              "assigning variable b_rcens",
              stan::model::index_min_max(1, nrcens),
              stan::model::index_uni(j));
          }
          current_statement__ = 49;
          if (stan::math::logical_gt(nextern, 0)) {
            current_statement__ = 47;
            stan::model::assign(b_extern, stan::math::rep_vector(0, nextern),
              "assigning variable b_extern",
              stan::model::index_min_max(1, nextern),
              stan::model::index_uni(j));
          }
        }
        current_statement__ = 52;
        ssd = 0;
      }
      {
        current_statement__ = 93;
        stan::math::validate_non_negative_index("alpha_event", "nevent",
          nevent);
        Eigen::Matrix<local_scalar_t__,-1,1> alpha_event =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nevent, DUMMY_VAR__);
        current_statement__ = 95;
        stan::math::validate_non_negative_index("alpha_rcens", "nrcens",
          nrcens);
        Eigen::Matrix<local_scalar_t__,-1,1> alpha_rcens =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nrcens, DUMMY_VAR__);
        current_statement__ = 97;
        stan::math::validate_non_negative_index("alpha_extern", "nextern",
          nextern);
        Eigen::Matrix<local_scalar_t__,-1,1> alpha_extern =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nextern,
            DUMMY_VAR__);
        local_scalar_t__ cp = DUMMY_VAR__;
        current_statement__ = 100;
        stan::math::validate_non_negative_index("p_ext_stop", "nextern",
          nextern);
        Eigen::Matrix<local_scalar_t__,-1,1> p_ext_stop =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nextern,
            DUMMY_VAR__);
        current_statement__ = 102;
        stan::math::validate_non_negative_index("p_ext_start", "nextern",
          nextern);
        Eigen::Matrix<local_scalar_t__,-1,1> p_ext_start =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nextern,
            DUMMY_VAR__);
        current_statement__ = 104;
        stan::math::validate_non_negative_index("pcure_event", "nevent",
          nevent);
        Eigen::Matrix<local_scalar_t__,-1,1> pcure_event =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nevent, DUMMY_VAR__);
        current_statement__ = 106;
        stan::math::validate_non_negative_index("pcure_rcens", "nrcens",
          nrcens);
        Eigen::Matrix<local_scalar_t__,-1,1> pcure_rcens =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nrcens, DUMMY_VAR__);
        current_statement__ = 108;
        stan::math::validate_non_negative_index("pcure_extern", "nextern",
          nextern);
        Eigen::Matrix<local_scalar_t__,-1,1> pcure_extern =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nextern,
            DUMMY_VAR__);
        current_statement__ = 111;
        if (stan::math::logical_gt(nevent, 0)) {
          current_statement__ = 110;
          stan::model::assign(alpha_event,
            stan::math::rep_vector(
              (stan::model::rvalue(prior_hscale, "prior_hscale",
                 stan::model::index_uni(1)) +
              stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))),
              nevent), "assigning variable alpha_event");
        }
        current_statement__ = 113;
        if (stan::math::logical_gt(nrcens, 0)) {
          current_statement__ = 112;
          stan::model::assign(alpha_rcens,
            stan::math::rep_vector(
              (stan::model::rvalue(prior_hscale, "prior_hscale",
                 stan::model::index_uni(1)) +
              stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))),
              nrcens), "assigning variable alpha_rcens");
        }
        current_statement__ = 115;
        if (stan::math::logical_gt(nextern, 0)) {
          current_statement__ = 114;
          stan::model::assign(alpha_extern,
            stan::math::rep_vector(
              (stan::model::rvalue(prior_hscale, "prior_hscale",
                 stan::model::index_uni(1)) +
              stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))),
              nextern), "assigning variable alpha_extern");
        }
        current_statement__ = 123;
        if (stan::math::logical_gt(ncovs, 0)) {
          current_statement__ = 117;
          if (stan::math::logical_gt(nevent, 0)) {
            current_statement__ = 116;
            stan::model::assign(alpha_event,
              stan::math::add(stan::model::deep_copy(alpha_event),
                stan::math::multiply(x_event, loghr)),
              "assigning variable alpha_event");
          }
          current_statement__ = 119;
          if (stan::math::logical_gt(nrcens, 0)) {
            current_statement__ = 118;
            stan::model::assign(alpha_rcens,
              stan::math::add(stan::model::deep_copy(alpha_rcens),
                stan::math::multiply(x_rcens, loghr)),
              "assigning variable alpha_rcens");
          }
          current_statement__ = 121;
          if (stan::math::logical_gt(nextern, 0)) {
            current_statement__ = 120;
            stan::model::assign(alpha_extern,
              stan::math::add(stan::model::deep_copy(alpha_extern),
                stan::math::multiply(x_ext, loghr)),
              "assigning variable alpha_extern");
          }
        }
        current_statement__ = 126;
        if (cure) {
          current_statement__ = 125;
          cp = stan::model::rvalue(pcure, "pcure", stan::model::index_uni(1));
        } else {
          current_statement__ = 124;
          cp = 0;
        }
        current_statement__ = 127;
        stan::model::assign(pcure_event, stan::math::rep_vector(cp, nevent),
          "assigning variable pcure_event");
        current_statement__ = 128;
        stan::model::assign(pcure_rcens, stan::math::rep_vector(cp, nrcens),
          "assigning variable pcure_rcens");
        current_statement__ = 129;
        stan::model::assign(pcure_extern,
          stan::math::rep_vector(cp, nextern),
          "assigning variable pcure_extern");
        current_statement__ = 137;
        if (stan::math::logical_gt(ncurecovs, 0)) {
          current_statement__ = 131;
          if (stan::math::logical_gt(nevent, 0)) {
            current_statement__ = 130;
            stan::model::assign(pcure_event,
              stan::math::inv_logit(
                stan::math::add(
                  stan::math::logit(stan::model::deep_copy(pcure_event)),
                  stan::math::multiply(xcure_event, logor_cure))),
              "assigning variable pcure_event");
          }
          current_statement__ = 133;
          if (stan::math::logical_gt(nrcens, 0)) {
            current_statement__ = 132;
            stan::model::assign(pcure_rcens,
              stan::math::inv_logit(
                stan::math::add(
                  stan::math::logit(stan::model::deep_copy(pcure_rcens)),
                  stan::math::multiply(xcure_rcens, logor_cure))),
              "assigning variable pcure_rcens");
          }
          current_statement__ = 135;
          if (stan::math::logical_gt(nextern, 0)) {
            current_statement__ = 134;
            stan::model::assign(pcure_extern,
              stan::math::inv_logit(
                stan::math::add(
                  stan::math::logit(stan::model::deep_copy(pcure_extern)),
                  stan::math::multiply(xcure_ext, logor_cure))),
              "assigning variable pcure_extern");
          }
        }
        current_statement__ = 139;
        if (stan::math::logical_gt(nevent, 0)) {
          current_statement__ = 138;
          lp_accum__.add(log_dens(alpha_event, basis_event, coefs_event,
                           cure, pcure_event, ibasis_event, modelid,
                           relative, backhaz_event, pstream__));
        }
        current_statement__ = 141;
        if (stan::math::logical_gt(nrcens, 0)) {
          current_statement__ = 140;
          lp_accum__.add(log_surv(alpha_rcens, ibasis_rcens, coefs_rcens,
                           cure, pcure_rcens, modelid, pstream__));
        }
        current_statement__ = 146;
        if (stan::math::logical_gt(nextern, 0)) {
          current_statement__ = 142;
          stan::model::assign(p_ext_stop,
            stan::math::elt_multiply(
              stan::math::exp(
                log_surv(alpha_extern, ibasis_ext_stop, coefs_extern, cure,
                  pcure_extern, modelid, pstream__)), backsurv_ext_stop),
            "assigning variable p_ext_stop");
          current_statement__ = 143;
          stan::model::assign(p_ext_start,
            stan::math::elt_multiply(
              stan::math::exp(
                log_surv(alpha_extern, ibasis_ext_start, coefs_extern, cure,
                  pcure_extern, modelid, pstream__)), backsurv_ext_start),
            "assigning variable p_ext_start");
          current_statement__ = 144;
          lp_accum__.add(stan::math::binomial_lpmf<false>(r_ext, n_ext,
                           stan::math::elt_divide(p_ext_stop, p_ext_start)));
        }
        current_statement__ = 147;
        loghaz_lp<propto__>(
          stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1)),
          prior_hscale_dist, static_cast<double>(0),
          stan::model::rvalue(prior_hscale, "prior_hscale",
            stan::model::index_uni(2)),
          stan::model::rvalue(prior_hscale, "prior_hscale",
            stan::model::index_uni(3)), lp__, lp_accum__, pstream__);
        current_statement__ = 148;
        loghr_lp<propto__>(loghr, prior_loghr_dist, prior_loghr_location,
          prior_loghr_scale, prior_loghr_df, lp__, lp_accum__, pstream__);
        current_statement__ = 159;
        if (stan::math::logical_eq(smooth_model, 1)) {
          current_statement__ = 157;
          lp_accum__.add(stan::math::logistic_lpdf<propto__>(b_err, 0, 1));
        } else {
          current_statement__ = 156;
          if (stan::math::logical_eq(smooth_model, 2)) {
            current_statement__ = 149;
            lp_accum__.add(stan::math::logistic_lpdf<propto__>(
                             stan::model::rvalue(b_err, "b_err",
                               stan::model::index_uni(1)), 0,
                             stan::model::rvalue(sqrt_wt, "sqrt_wt",
                               stan::model::index_uni(1))));
            current_statement__ = 154;
            if (stan::math::logical_gte((nvars - 1), 2)) {
              current_statement__ = 152;
              for (int k = 2; k <= (nvars - 1); ++k) {
                current_statement__ = 150;
                lp_accum__.add(stan::math::logistic_lpdf<propto__>(
                                 stan::model::rvalue(b_err, "b_err",
                                   stan::model::index_uni(k)),
                                 stan::model::rvalue(b_err, "b_err",
                                   stan::model::index_uni((k - 1))),
                                 stan::model::rvalue(sqrt_wt, "sqrt_wt",
                                   stan::model::index_uni(k))));
              }
            }
          }
        }
        current_statement__ = 162;
        if (cure) {
          current_statement__ = 160;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(pcure,
                           stan::model::rvalue(prior_cure, "prior_cure",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_cure, "prior_cure",
                             stan::model::index_uni(2))));
        }
        current_statement__ = 165;
        if (stan::math::logical_gt(ncurecovs, 0)) {
          current_statement__ = 163;
          loghr_lp<propto__>(logor_cure, prior_logor_cure_dist,
            prior_logor_cure_location, prior_logor_cure_scale,
            prior_logor_cure_df, lp__, lp_accum__, pstream__);
        }
        current_statement__ = 168;
        if (est_hsd) {
          current_statement__ = 166;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(hsd,
                           stan::model::rvalue(prior_hsd, "prior_hsd",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_hsd, "prior_hsd",
                             stan::model::index_uni(2))));
        }
        current_statement__ = 183;
        if (stan::math::logical_gt(nnphcovs, 0)) {
          current_statement__ = 169;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(hrsd,
                           stan::model::rvalue(prior_hrsd, "prior_hrsd",
                             stan::model::index_omni(),
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_hrsd, "prior_hrsd",
                             stan::model::index_omni(),
                             stan::model::index_uni(2))));
          current_statement__ = 181;
          for (int i = 1; i <= nnphcovs; ++i) {
            current_statement__ = 179;
            if (stan::math::logical_eq(smooth_model, 1)) {
              current_statement__ = 177;
              lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                               stan::model::rvalue(nperr, "nperr",
                                 stan::model::index_uni(i),
                                 stan::model::index_min_max(1, (nvars - 1)))));
            } else {
              current_statement__ = 176;
              if (stan::math::logical_eq(smooth_model, 2)) {
                current_statement__ = 170;
                lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                 stan::model::rvalue(nperr, "nperr",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)), 0,
                                 stan::model::rvalue(sqrt_wt, "sqrt_wt",
                                   stan::model::index_uni(1))));
                current_statement__ = 174;
                if (stan::math::logical_gte((nvars - 1), 2)) {
                  current_statement__ = 173;
                  for (int k = 2; k <= (nvars - 1); ++k) {
                    current_statement__ = 171;
                    lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                     stan::model::rvalue(nperr, "nperr",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(k)),
                                     stan::model::rvalue(nperr, "nperr",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni((k - 1))),
                                     stan::model::rvalue(sqrt_wt, "sqrt_wt",
                                       stan::model::index_uni(k))));
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_survextrap_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> gamma =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      gamma = in__.template read<std::vector<local_scalar_t__>>(1);
      Eigen::Matrix<double,-1,1> loghr =
        Eigen::Matrix<double,-1,1>::Constant(ncovs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      loghr = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncovs);
      Eigen::Matrix<double,-1,1> b_err =
        Eigen::Matrix<double,-1,1>::Constant(b_err_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      b_err = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(b_err_1dim__);
      Eigen::Matrix<double,-1,1> hsd =
        Eigen::Matrix<double,-1,1>::Constant(est_hsd,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      hsd = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              est_hsd);
      Eigen::Matrix<double,-1,1> pcure =
        Eigen::Matrix<double,-1,1>::Constant(cure,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      pcure = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
                cure);
      Eigen::Matrix<double,-1,1> logor_cure =
        Eigen::Matrix<double,-1,1>::Constant(ncurecovs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      logor_cure = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(ncurecovs);
      Eigen::Matrix<double,-1,1> hrsd =
        Eigen::Matrix<double,-1,1>::Constant(nnphcovs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      hrsd = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               nnphcovs);
      Eigen::Matrix<double,-1,-1> nperr =
        Eigen::Matrix<double,-1,-1>::Constant(nnphcovs, nperr_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      nperr = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(nnphcovs,
                nperr_2dim__);
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> coefs =
        Eigen::Matrix<double,-1,1>::Constant(nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> coefs_event =
        Eigen::Matrix<double,-1,-1>::Constant(nevent, nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> coefs_rcens =
        Eigen::Matrix<double,-1,-1>::Constant(nrcens, nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> coefs_extern =
        Eigen::Matrix<double,-1,-1>::Constant(nextern, nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> b_event =
        Eigen::Matrix<double,-1,-1>::Constant(nevent, nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> b_rcens =
        Eigen::Matrix<double,-1,-1>::Constant(nrcens, nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> b_extern =
        Eigen::Matrix<double,-1,-1>::Constant(nextern, nvars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> b_np =
        Eigen::Matrix<double,-1,-1>::Constant(nnphcovs, b_np_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      double ssd = std::numeric_limits<double>::quiet_NaN();
      out__.write(gamma);
      out__.write(loghr);
      out__.write(b_err);
      out__.write(hsd);
      out__.write(pcure);
      out__.write(logor_cure);
      out__.write(hrsd);
      out__.write(nperr);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 92;
      if (stan::math::logical_gt(nnphcovs, 0)) {
        current_statement__ = 56;
        for (int r = 1; r <= nnphcovs; ++r) {
          current_statement__ = 54;
          stan::model::assign(b_np,
            stan::math::multiply(
              stan::model::rvalue(hrsd, "hrsd", stan::model::index_uni(r)),
              stan::model::rvalue(nperr, "nperr", stan::model::index_uni(r),
                stan::model::index_min_max(1, (nvars - 1)))),
            "assigning variable b_np", stan::model::index_uni(r),
            stan::model::index_min_max(1, (nvars - 1)));
        }
        current_statement__ = 61;
        if (est_hsd) {
          current_statement__ = 59;
          ssd = stan::model::rvalue(hsd, "hsd", stan::model::index_uni(1));
        } else {
          current_statement__ = 57;
          ssd = stan::model::rvalue(hsd_fixed, "hsd_fixed",
                  stan::model::index_uni(1));
        }
        current_statement__ = 62;
        stan::model::assign(b,
          stan::math::append_row(0,
            stan::math::add(b_mean, stan::math::multiply(b_err, ssd))),
          "assigning variable b");
        current_statement__ = 63;
        stan::model::assign(coefs, stan::math::softmax(b),
          "assigning variable coefs");
        current_statement__ = 72;
        if (stan::math::logical_gt(nevent, 0)) {
          current_statement__ = 64;
          stan::model::assign(b_event, stan::math::rep_vector(0, nevent),
            "assigning variable b_event",
            stan::model::index_min_max(1, nevent), stan::model::index_uni(1));
          current_statement__ = 67;
          for (int j = 1; j <= (nvars - 1); ++j) {
            current_statement__ = 65;
            stan::model::assign(b_event,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(b_mean, "b_mean",
                    stan::model::index_uni(j)),
                  stan::math::multiply(xnph_event,
                    stan::model::rvalue(b_np, "b_np",
                      stan::model::index_omni(), stan::model::index_uni(j)))),
                (stan::model::rvalue(b_err, "b_err",
                   stan::model::index_uni(j)) * ssd)),
              "assigning variable b_event",
              stan::model::index_min_max(1, nevent),
              stan::model::index_uni((j + 1)));
          }
          current_statement__ = 70;
          for (int i = 1; i <= nevent; ++i) {
            current_statement__ = 68;
            stan::model::assign(coefs_event,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::to_vector(
                    stan::model::rvalue(b_event, "b_event",
                      stan::model::index_uni(i),
                      stan::model::index_min_max(1, nvars))))),
              "assigning variable coefs_event", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 81;
        if (stan::math::logical_gt(nrcens, 0)) {
          current_statement__ = 73;
          stan::model::assign(b_rcens, stan::math::rep_vector(0, nrcens),
            "assigning variable b_rcens",
            stan::model::index_min_max(1, nrcens), stan::model::index_uni(1));
          current_statement__ = 76;
          for (int j = 1; j <= (nvars - 1); ++j) {
            current_statement__ = 74;
            stan::model::assign(b_rcens,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(b_mean, "b_mean",
                    stan::model::index_uni(j)),
                  stan::math::multiply(xnph_rcens,
                    stan::model::rvalue(b_np, "b_np",
                      stan::model::index_omni(), stan::model::index_uni(j)))),
                (stan::model::rvalue(b_err, "b_err",
                   stan::model::index_uni(j)) * ssd)),
              "assigning variable b_rcens",
              stan::model::index_min_max(1, nrcens),
              stan::model::index_uni((j + 1)));
          }
          current_statement__ = 79;
          for (int i = 1; i <= nrcens; ++i) {
            current_statement__ = 77;
            stan::model::assign(coefs_rcens,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::to_vector(
                    stan::model::rvalue(b_rcens, "b_rcens",
                      stan::model::index_uni(i),
                      stan::model::index_min_max(1, nvars))))),
              "assigning variable coefs_rcens", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 90;
        if (stan::math::logical_gt(nextern, 0)) {
          current_statement__ = 82;
          stan::model::assign(b_extern, stan::math::rep_vector(0, nextern),
            "assigning variable b_extern",
            stan::model::index_min_max(1, nextern), stan::model::index_uni(1));
          current_statement__ = 85;
          for (int j = 1; j <= (nvars - 1); ++j) {
            current_statement__ = 83;
            stan::model::assign(b_extern,
              stan::math::add(
                stan::math::add(
                  stan::model::rvalue(b_mean, "b_mean",
                    stan::model::index_uni(j)),
                  stan::math::multiply(xnph_ext,
                    stan::model::rvalue(b_np, "b_np",
                      stan::model::index_omni(), stan::model::index_uni(j)))),
                (stan::model::rvalue(b_err, "b_err",
                   stan::model::index_uni(j)) * ssd)),
              "assigning variable b_extern",
              stan::model::index_min_max(1, nextern),
              stan::model::index_uni((j + 1)));
          }
          current_statement__ = 88;
          for (int i = 1; i <= nextern; ++i) {
            current_statement__ = 86;
            stan::model::assign(coefs_extern,
              stan::math::to_row_vector(
                stan::math::softmax(
                  stan::math::to_vector(
                    stan::model::rvalue(b_extern, "b_extern",
                      stan::model::index_uni(i),
                      stan::model::index_min_max(1, nvars))))),
              "assigning variable coefs_extern", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
      } else {
        current_statement__ = 24;
        if (est_hsd) {
          current_statement__ = 23;
          stan::model::assign(b,
            stan::math::append_row(0,
              stan::math::add(b_mean,
                stan::math::multiply(b_err,
                  stan::model::rvalue(hsd, "hsd", stan::model::index_uni(1))))),
            "assigning variable b");
        } else {
          current_statement__ = 22;
          stan::model::assign(b,
            stan::math::append_row(0,
              stan::math::add(b_mean,
                stan::math::multiply(b_err,
                  stan::model::rvalue(hsd_fixed, "hsd_fixed",
                    stan::model::index_uni(1))))), "assigning variable b");
        }
        current_statement__ = 25;
        stan::model::assign(coefs, stan::math::softmax(b),
          "assigning variable coefs");
        current_statement__ = 30;
        if (stan::math::logical_gt(nevent, 0)) {
          current_statement__ = 28;
          for (int i = 1; i <= nevent; ++i) {
            current_statement__ = 26;
            stan::model::assign(coefs_event,
              stan::math::to_row_vector(coefs),
              "assigning variable coefs_event", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 35;
        if (stan::math::logical_gt(nrcens, 0)) {
          current_statement__ = 33;
          for (int i = 1; i <= nrcens; ++i) {
            current_statement__ = 31;
            stan::model::assign(coefs_rcens,
              stan::math::to_row_vector(coefs),
              "assigning variable coefs_rcens", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 40;
        if (stan::math::logical_gt(nextern, 0)) {
          current_statement__ = 38;
          for (int i = 1; i <= nextern; ++i) {
            current_statement__ = 36;
            stan::model::assign(coefs_extern,
              stan::math::to_row_vector(coefs),
              "assigning variable coefs_extern", stan::model::index_uni(i),
              stan::model::index_min_max(1, nvars));
          }
        }
        current_statement__ = 51;
        for (int j = 1; j <= nvars; ++j) {
          current_statement__ = 43;
          if (stan::math::logical_gt(nevent, 0)) {
            current_statement__ = 41;
            stan::model::assign(b_event, stan::math::rep_vector(0, nevent),
              "assigning variable b_event",
              stan::model::index_min_max(1, nevent),
              stan::model::index_uni(j));
          }
          current_statement__ = 46;
          if (stan::math::logical_gt(nrcens, 0)) {
            current_statement__ = 44;
            stan::model::assign(b_rcens, stan::math::rep_vector(0, nrcens),
              "assigning variable b_rcens",
              stan::model::index_min_max(1, nrcens),
              stan::model::index_uni(j));
          }
          current_statement__ = 49;
          if (stan::math::logical_gt(nextern, 0)) {
            current_statement__ = 47;
            stan::model::assign(b_extern, stan::math::rep_vector(0, nextern),
              "assigning variable b_extern",
              stan::model::index_min_max(1, nextern),
              stan::model::index_uni(j));
          }
        }
        current_statement__ = 52;
        ssd = 0;
      }
      if (emit_transformed_parameters__) {
        out__.write(b);
        out__.write(coefs);
        out__.write(coefs_event);
        out__.write(coefs_rcens);
        out__.write(coefs_extern);
        out__.write(b_event);
        out__.write(b_rcens);
        out__.write(b_extern);
        out__.write(b_np);
        out__.write(ssd);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      alpha = (stan::model::rvalue(prior_hscale, "prior_hscale",
                 stan::model::index_uni(1))
        + stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1)));
      Eigen::Matrix<double,-1,1> hr =
        Eigen::Matrix<double,-1,1>::Constant(ncovs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      stan::model::assign(hr, stan::math::exp(loghr), "assigning variable hr");
      Eigen::Matrix<double,-1,1> or_cure =
        Eigen::Matrix<double,-1,1>::Constant(ncurecovs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      stan::model::assign(or_cure, stan::math::exp(logor_cure),
        "assigning variable or_cure");
      out__.write(alpha);
      out__.write(hr);
      out__.write(or_cure);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(gamma, in__.read<std::vector<local_scalar_t__>>(1),
        "assigning variable gamma");
      out__.write(gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncovs, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(loghr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncovs),
        "assigning variable loghr");
      out__.write(loghr);
      Eigen::Matrix<local_scalar_t__,-1,1> b_err =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(b_err_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(b_err,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(b_err_1dim__),
        "assigning variable b_err");
      out__.write(b_err);
      Eigen::Matrix<local_scalar_t__,-1,1> hsd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_hsd, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(hsd,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(est_hsd),
        "assigning variable hsd");
      out__.write_free_lb(0, hsd);
      Eigen::Matrix<local_scalar_t__,-1,1> pcure =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(cure, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(pcure,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(cure),
        "assigning variable pcure");
      out__.write_free_lub(0, 1, pcure);
      Eigen::Matrix<local_scalar_t__,-1,1> logor_cure =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncurecovs,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(logor_cure,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncurecovs),
        "assigning variable logor_cure");
      out__.write(logor_cure);
      Eigen::Matrix<local_scalar_t__,-1,1> hrsd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nnphcovs, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(hrsd,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nnphcovs),
        "assigning variable hrsd");
      out__.write_free_lb(0, hrsd);
      Eigen::Matrix<local_scalar_t__,-1,-1> nperr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nnphcovs,
          nperr_2dim__, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(nperr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(nnphcovs,
          nperr_2dim__), "assigning variable nperr");
      out__.write(nperr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "loghr", "double",
        std::vector<size_t>{static_cast<size_t>(ncovs)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "b_err", "double",
        std::vector<size_t>{static_cast<size_t>(b_err_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "hsd", "double",
        std::vector<size_t>{static_cast<size_t>(est_hsd)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "pcure", "double",
        std::vector<size_t>{static_cast<size_t>(cure)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "logor_cure",
        "double", std::vector<size_t>{static_cast<size_t>(ncurecovs)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "hrsd", "double",
        std::vector<size_t>{static_cast<size_t>(nnphcovs)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "nperr", "double",
        std::vector<size_t>{static_cast<size_t>(nnphcovs),
          static_cast<size_t>(nperr_2dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> gamma =
        std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 1;
      gamma = context__.vals_r("gamma");
      out__.write(gamma);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncovs, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> loghr_flat__;
        current_statement__ = 2;
        loghr_flat__ = context__.vals_r("loghr");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(loghr, loghr_flat__[(pos__ - 1)],
            "assigning variable loghr", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(loghr);
      Eigen::Matrix<local_scalar_t__,-1,1> b_err =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(b_err_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_err_flat__;
        current_statement__ = 3;
        b_err_flat__ = context__.vals_r("b_err");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= b_err_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(b_err, b_err_flat__[(pos__ - 1)],
            "assigning variable b_err", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(b_err);
      Eigen::Matrix<local_scalar_t__,-1,1> hsd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_hsd, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> hsd_flat__;
        current_statement__ = 4;
        hsd_flat__ = context__.vals_r("hsd");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= est_hsd; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(hsd, hsd_flat__[(pos__ - 1)],
            "assigning variable hsd", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, hsd);
      Eigen::Matrix<local_scalar_t__,-1,1> pcure =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(cure, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> pcure_flat__;
        current_statement__ = 5;
        pcure_flat__ = context__.vals_r("pcure");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= cure; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(pcure, pcure_flat__[(pos__ - 1)],
            "assigning variable pcure", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, pcure);
      Eigen::Matrix<local_scalar_t__,-1,1> logor_cure =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncurecovs,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logor_cure_flat__;
        current_statement__ = 6;
        logor_cure_flat__ = context__.vals_r("logor_cure");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(logor_cure, logor_cure_flat__[(pos__ - 1)],
            "assigning variable logor_cure", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logor_cure);
      Eigen::Matrix<local_scalar_t__,-1,1> hrsd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nnphcovs, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> hrsd_flat__;
        current_statement__ = 7;
        hrsd_flat__ = context__.vals_r("hrsd");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= nnphcovs; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(hrsd, hrsd_flat__[(pos__ - 1)],
            "assigning variable hrsd", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, hrsd);
      Eigen::Matrix<local_scalar_t__,-1,-1> nperr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nnphcovs,
          nperr_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nperr_flat__;
        current_statement__ = 8;
        nperr_flat__ = context__.vals_r("nperr");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= nperr_2dim__; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= nnphcovs; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(nperr, nperr_flat__[(pos__ - 1)],
              "assigning variable nperr", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(nperr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"gamma", "loghr", "b_err", "hsd",
                "pcure", "logor_cure", "hrsd", "nperr"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"b", "coefs", "coefs_event", "coefs_rcens", "coefs_extern",
             "b_event", "b_rcens", "b_extern", "b_np", "ssd"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"alpha", "hr", "or_cure"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(ncovs)},
                std::vector<size_t>{static_cast<size_t>(b_err_1dim__)},
                std::vector<size_t>{static_cast<size_t>(est_hsd)},
                std::vector<size_t>{static_cast<size_t>(cure)},
                std::vector<size_t>{static_cast<size_t>(ncurecovs)},
                std::vector<size_t>{static_cast<size_t>(nnphcovs)},
                std::vector<size_t>{static_cast<size_t>(nnphcovs),
                  static_cast<size_t>(nperr_2dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nevent),
               static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nrcens),
               static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nextern),
               static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nevent),
               static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nrcens),
               static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nextern),
               static_cast<size_t>(nvars)},
             std::vector<size_t>{static_cast<size_t>(nnphcovs),
               static_cast<size_t>(b_np_2dim__)}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(ncovs)},
             std::vector<size_t>{static_cast<size_t>(ncurecovs)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
      param_names__.emplace_back(std::string() + "loghr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= b_err_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_err" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_hsd; ++sym1__) {
      param_names__.emplace_back(std::string() + "hsd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= cure; ++sym1__) {
      param_names__.emplace_back(std::string() + "pcure" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
      param_names__.emplace_back(std::string() + "logor_cure" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nnphcovs; ++sym1__) {
      param_names__.emplace_back(std::string() + "hrsd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nperr_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nnphcovs; ++sym2__) {
        param_names__.emplace_back(std::string() + "nperr" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        param_names__.emplace_back(std::string() + "coefs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
          param_names__.emplace_back(std::string() + "coefs_event" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
          param_names__.emplace_back(std::string() + "coefs_rcens" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
          param_names__.emplace_back(std::string() + "coefs_extern" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_event" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_rcens" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_extern" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= b_np_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nnphcovs; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_np" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "ssd");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "alpha");
      for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
        param_names__.emplace_back(std::string() + "hr" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
        param_names__.emplace_back(std::string() + "or_cure" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
      param_names__.emplace_back(std::string() + "loghr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= b_err_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_err" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_hsd; ++sym1__) {
      param_names__.emplace_back(std::string() + "hsd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= cure; ++sym1__) {
      param_names__.emplace_back(std::string() + "pcure" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
      param_names__.emplace_back(std::string() + "logor_cure" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nnphcovs; ++sym1__) {
      param_names__.emplace_back(std::string() + "hrsd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nperr_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nnphcovs; ++sym2__) {
        param_names__.emplace_back(std::string() + "nperr" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        param_names__.emplace_back(std::string() + "coefs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
          param_names__.emplace_back(std::string() + "coefs_event" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
          param_names__.emplace_back(std::string() + "coefs_rcens" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
          param_names__.emplace_back(std::string() + "coefs_extern" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nevent; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_event" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nrcens; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_rcens" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nvars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nextern; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_extern" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= b_np_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nnphcovs; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_np" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "ssd");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "alpha");
      for (int sym1__ = 1; sym1__ <= ncovs; ++sym1__) {
        param_names__.emplace_back(std::string() + "hr" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ncurecovs; ++sym1__) {
        param_names__.emplace_back(std::string() + "or_cure" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loghr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncovs) + "},\"block\":\"parameters\"},{\"name\":\"b_err\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(b_err_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"hsd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(est_hsd) + "},\"block\":\"parameters\"},{\"name\":\"pcure\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cure) + "},\"block\":\"parameters\"},{\"name\":\"logor_cure\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncurecovs) + "},\"block\":\"parameters\"},{\"name\":\"hrsd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nnphcovs) + "},\"block\":\"parameters\"},{\"name\":\"nperr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nnphcovs) + ",\"cols\":" + std::to_string(nperr_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs_event\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nevent) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs_rcens\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nrcens) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs_extern\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nextern) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_event\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nevent) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_rcens\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nrcens) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_extern\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nextern) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_np\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nnphcovs) + ",\"cols\":" + std::to_string(b_np_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ssd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncovs) + "},\"block\":\"generated_quantities\"},{\"name\":\"or_cure\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncurecovs) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loghr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncovs) + "},\"block\":\"parameters\"},{\"name\":\"b_err\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(b_err_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"hsd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(est_hsd) + "},\"block\":\"parameters\"},{\"name\":\"pcure\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(cure) + "},\"block\":\"parameters\"},{\"name\":\"logor_cure\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncurecovs) + "},\"block\":\"parameters\"},{\"name\":\"hrsd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nnphcovs) + "},\"block\":\"parameters\"},{\"name\":\"nperr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nnphcovs) + ",\"cols\":" + std::to_string(nperr_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs_event\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nevent) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs_rcens\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nrcens) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"coefs_extern\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nextern) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_event\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nevent) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_rcens\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nrcens) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_extern\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nextern) + ",\"cols\":" + std::to_string(nvars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_np\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nnphcovs) + ",\"cols\":" + std::to_string(b_np_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ssd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncovs) + "},\"block\":\"generated_quantities\"},{\"name\":\"or_cure\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncurecovs) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + ncovs) + b_err_1dim__) + est_hsd)
      + cure) + ncurecovs) + nnphcovs) + (nnphcovs * nperr_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((nvars + nvars) + (nevent * nvars)) + (nrcens * nvars)) +
      (nextern * nvars)) + (nevent * nvars)) + (nrcens * nvars)) + (nextern *
      nvars)) + (nnphcovs * b_np_2dim__)) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (((1 +
      ncovs) + ncurecovs));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + ncovs) + b_err_1dim__) + est_hsd)
      + cure) + ncurecovs) + nnphcovs) + (nnphcovs * nperr_2dim__));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((nvars + nvars) + (nevent * nvars)) + (nrcens * nvars)) +
      (nextern * nvars)) + (nevent * nvars)) + (nrcens * nvars)) + (nextern *
      nvars)) + (nnphcovs * b_np_2dim__)) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (((1 +
      ncovs) + ncurecovs));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_survextrap_namespace::model_survextrap;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_survextrap_namespace::profiles__;
}
#endif
#endif
